{"version":3,"sources":["../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/CameraController.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/CanvasManager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/Constant.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/data/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/data/CustomEventListener.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/data/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/data/Dictionary.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/Edge.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/EdgeManager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/Graphplayer.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/HttpRequest.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/JSONReader.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/LayoutManager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/Manager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/RelationManager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/TableData.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/UIManager.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/Vertex.ts","../file:/F:/openSource/projects/graph-player/assets/resources/Scipts/file:/F:/openSource/projects/graph-player/assets/resources/Scipts/VertexManager.ts"],"names":["ccclass","_decorator","property","_dec","_dec2","Camera","_dec3","Vec3","_dec4","_dec5","_descriptor","_applyDecoratedDescriptor","_class2","_Component","CameraController","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_assertThisInitialized","_descriptor2","_descriptor3","_descriptor4","smoothZoomIntervals","originalOffsetFactor","_inheritsLoose","_proto","prototype","onLoad","camera","find","getComponent","originalOffset","near","this","clone","normalize","focusOn","node","recordCurrentOffset","targetPosition","getWorldPosition","targetOffset","currentOffset","multiplyScalar","tween","to","worldPosition","add","easing","start","rotateOnVertex","target","center","angle","axis","UP","rotateQuat","Quat","dir","rotated","subtract","rad","misc","degreesToRadians","fromAxisAngle","transformQuat","resetPosition","position","Manager","Instance","vertexManager","rootNode","rotation","identity","canvasManager","cameraRotateOffset","currentCentralNode","chosenVertex","Component","configurable","enumerable","writable","initializer","_class","_RF","pop","type","Node","CanvasManager","leftClickCount","lastClickTime","doubleClickDelay","_zoomSpeed","cameraMove","cameraRotateAroundVertex","previousMousePosition","previousMousePositionVec3","dragMoveSpeed","dragRotateSpeed","dragRotationQuat","dragRotateEuler","input","on","Input","EventType","MOUSE_DOWN","onMouseDown","MOUSE_UP","onMouseUp","MOUSE_MOVE","onMouseMove","MOUSE_WHEEL","onMouseWheel","resetCanvas","event","dx","getDeltaX","dy","getDeltaY","newPosition","cameraController","x","y","z","currentMousePosition","getLocation","angleX","angleY","cameraPos","targetPos","rotatedPosX","rotatedPosY","RIGHT","lookAt","getButton","EventMouse","BUTTON_RIGHT","chooseVertexOrEdgeAtMouse","BUTTON_MIDDLE","BUTTON_LEFT","set","getLocationX","getLocationY","UIManager","tagOrderChoiceBar","active","dropDownBarLayout","scrollY","getScrollY","newCameraPos","math","scaleAndAdd","forward","onDestroy","off","createVertexAtMouse","ray","geometry","Ray","screenPointToRay","PhysicsSystem","instance","raycastClosest","result","raycastClosestResult","collider","Vertex","childVertex","createNodeAround","edgeManager","createEdgeWithStartAndEnd","returnFocusToNormalEdge","centralVertex","returnFocusToNormalVertex","chooseOneNormalVertexToFocus","showVertexDetails","Edge","chosenEdgeNode","chooseNormalEdge","showEdgeDetails","cleanCanvas","destroyAllChildren","destroyAllEdges","isNodeInfoEnable","nodeInfoBar","layoutManager","clearTags","initiateOriginalVertex","Constant","DEFAULT","MOUSE","EDGE","VERTEX","CustomEventListener","eventName","cb","handle","data","func","push","list","i","splice","dispatchEvent","Dictionary","key","value","CCString","_dec6","_dec7","_dec8","Object","_dec9","CCInteger","_dec10","_dec11","Boolean","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","startNode","endNode","startVertex","endVertex","end","setWorldPosition","distance","setScale","right","quat","rotationTo","setRotation","srcID","getVertexID","dstID","addAllThisVertexEdgeInfoOnEdge","vertexEdgeDic","addEdgeInfoOnVertex","edgeVertexDic","edgeID","getEdgeID","changeEdgeMaterialToFocused","focusMaterial","MeshRenderer","getMaterial","setMaterial","returnToInitialMaterial","initialMaterial","setAttribute","attribute","hasOwnProperty","edgeName","relationManager","setEdgeID","setRichInfo","addRichInfo","printNestedJSON","properties","rank","obj","parentKey","newKey","Prefab","EdgeManager","edgeNode","instantiate","edgePrefab","setParent","cleanAndDisableInfoBar","removeLayoutFlags","_step","_iterator","_createForOfIteratorHelperLoose","children","done","isLayouted","removeAllChildren","Graphplayer","buildByURL","url","JSONReader","createByURL","buildByJSONString","jsonString","createdByJSON","HttpRequest","send","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","JSON","parse","responseText","Error","statusText","stringify","TableData","putJSONtoModel","filename","_this2","path","loadJson","tables","transTabletoVertexAndEdge","callback","resources","load","err","res","error","message","json","getCookie","name","parts","document","cookie","split","decodeURIComponent","shift","_this3","fetch","then","response","console","log","jsonData","edges","_edgesParsedList","vertices","_verticesParsedList","edge","isStartVertexExists","existVertex","vid","isEndVertexExits","existEdge","getVertexNodeByVID","increaseVertexDegree","increaseTagDegree","createStartNode","LayoutManager","tagsNodeList","centerToTag0Radius","tagsNodeRadius","nodesLayerRadiusInterval","Math","PI","classifyNodeByTag","tagNodeCount","vertexTagSet","tag","getChildByName","newTagNode","parent","vertexTag","tags","adjustOrderOfTags","tagsName","_step2","_iterator2","tagName","reLayoutByTags","nodes","angleStep","cos","sin","_step3","_iterator3","tag0Node","updateEndVertexAndEdge","_step4","edgeNum","edgesSetOfVertex","areAllEdgesLayouted","_iterator4","normal","cross","ZERO","initialVector","selfAngleStep","initialAngle","selfAngle","angleBiasBetweenTags","getTagIndex","tmp_normal","tmp_initialVector","vectorWithRadius","getElementIndex","quaternion","materialReallocated","_step5","tagIndex","_iterator5","_step6","tagNode","_iterator6","setMaterialCode","changeMaterial","index","element","getTags","_step7","tagList","_iterator7","tagDegreeDic","tagDegreeDicLength","VertexManager","RelationManager","_class3","physics","enable","Set","vertexIDBox","edgeIDBox","setVertexID","_len2","_key2","s","vertexCount","removeVertex","has","removeEdge","edgeCount","_len3","_key3","resetVertexAndEdgeBox","clear","vertexID","vertex","map","edgeData","vertexData","Button","EditBox","RichText","Layout","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","clickEventHandler","EventHandler","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","jsonResponseUrl","vertexIDLabelManager","vertexIDLabelPrefab","BtnWidth","BtnLength","timer","isEnteredTagOrderChoiceBar","nodeInfoPrefix","nodeInfoSuffix","nodeInfoText","prefab","hideUIColumnBtn","hideUIColumnClickEventHandler","component","handler","clickEvents","showUIColumnBtn","showUIColumnClickEventHandler","hideColumnNode","userInputBar","submitInputButton","submitInputClickEventHandler","refreshClickEventHandler","refreshBtn","layoutEventHandler","layoutBtn","MOUSE_ENTER","chooseLayoutBtn","bind","MOUSE_LEAVE","onLayoutBtnMouseLeave","onMouseEnterTagOrderChoiceBar","onMouseLeaveTagOrderChoiceBar","hideUIColumn","showUIColumn","submitUserInput","content","string","nGQL","RefreshCanvas","createVertex","changeLayout","finalTagOrder","finalTagOrderList","info","cleanRichInfo","cleanTagOrderChoices","from","tagOrderList","keys","tagOrderNum","UITransform","setContentSize","tagOrderChoiceBtnList","tagOrderBtn","tagOrderChoiceBtnPrefab","setPosition","Label","tagOrderChoiceHandler","customEventData","getPermutationByTagDegree","join","firstElement","dic","arr","j","key1","key2","_ref","_i","_arr","generatePermutations","current","includes","slice","clearTimeout","setTimeout","child","destroy","setVeretxIDLabel","Number","CCBoolean","idLabel","addTag","entry","setVertexId","materialCode","code","materialIndex","tmpMaterial","passes","colorUniform","getUniform","getHandle","Vec4","color","Color","w","getMaterialCode","degree","isTransformView","vertexMaterialCount","vertexRadius","vertexPrefab","initialMaterialCode","floor","random","chosenNode","traverseNodesChildren","forEach"],"mappings":"miBAEQA,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,+BAGYC,EAD5BH,EAAQ,oBAAmBI,EAIvBF,EAASG,GAAOC,EAEhBJ,EAASK,GAAKC,EAEdN,EAASK,GAAKE,EAEdP,EAASG,GAAOF,GAT0BO,EAAAC,GAS1BC,WAAAC,YAAAC,YAAAC,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAPjBM,EAAAV,eAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,mBAAAY,EAAAD,EAAAX,IAAAU,EAAAV,kBAAAa,EAAAF,EAAAX,IAAAU,EAAAV,WAAAc,EAAAH,EAAAX,IAAAA,EAUQe,oBAAsB,IAAIf,EAC1BgB,4BAAoBhB,EAJXiB,EAAAlB,EAAAD,OAIWoB,EAAAnB,EAAAoB,iBAAAD,EAE5BE,OAAA,gBAESC,OAASC,EAAK,eAAeC,aAAajC,QAC1CkC,eAAiB,IAAIhC,EAAK,EAAE,EAAE,QAC9B6B,OAAOI,KAAO,SACdT,qBAAuBU,KAAKF,eAAerB,SAAWuB,KAAKF,eAAeG,QAAQC,YAAYzB,UAGtGe,EAGDW,QAAA,SAAQC,QACCC,0BACDC,EAAiBF,EAAKG,mBACtBC,EAAeR,KAAKS,cAAcR,QAAQC,YAAYQ,eAAeV,KAAKV,sBAG9EqB,EAAMX,KAAKL,OAAOS,MACbQ,GAAGZ,KAAKX,oBAAqB,CAC1BwB,cAAeP,EAAeL,QAAQa,IAAIN,IAExC,CAAEO,OAAQ,WACfC,SAKRxB,EAEDyB,eAAA,SAAeC,EAAcC,EAAcC,EAAeC,YAAAA,IAAAA,EAAavD,EAAKwD,QACpEC,EAAa,IAAIC,EACjBC,EAAM,IAAI3D,EACV4D,EAAU,IAAI5D,EAClBA,EAAK6D,SAASF,EAAKP,EAAQC,OACvBS,EAAMC,EAAKC,iBAAiBV,UAChCI,EAAKO,cAAcR,EAAYF,EAAMO,GACrC9D,EAAKkE,cAAcN,EAASD,EAAKF,GACjCzD,EAAKgD,IAAIY,EAASP,EAAQO,GACnBA,GACVlC,EAEDyC,cAAA,gBAEStC,OAAOS,KAAK8B,SAAWC,EAAQC,WAAWC,cAAcC,SAASJ,SAASjC,QAAQa,IAAId,KAAKF,qBAC3FH,OAAOS,KAAKmC,SAAYf,EAAKgB,SAAS,IAAIhB,IAGnDhC,EAGOa,oBAAP,gBAESI,cAAgB0B,EAAQC,WAAWK,cAAcC,mBAAmBzC,QAAQ0B,SAASQ,EAAQC,WAAWC,cAAcM,mBAAmBpC,oBAC9I4B,EAAQC,WAAWC,cAAcM,mBAAqBR,EAAQC,WAAWC,cAAcO,cAC1FvE,GArEiCwE,IAASpD,wBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAAA/D,EAAAhB,EAAAC,EAAAsB,4BAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,2BAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,mBAAA7D,EAAAlB,EAAAC,EAAAsB,oBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,mBAS1BC,EAT0B/E,KAAA+E,MAyE9CC,IAAAC;;gpBCxEO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,4BAGSC,EADzBH,EAAQ,iBAAgBI,EAIpBF,EAAS,CAAE4F,KAAKC,IAAM5F,GAHiBO,EAAAC,GAGjBC,WAAAC,YAAAmF,YAAAjF,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,kBAAAL,EAAAgB,EAAAX,IAGvBA,EAEOkF,eAAyB,EAAClF,EACzBmF,cAAwB,EAACnF,EACzBoF,iBAA2B,GAGnCpF,EACQqF,WAAqB,KAI7BrF,EACQsF,YAAa,EAAKtF,EAClBuF,0BAA2B,EAAKvF,EACjCoE,mBAA2B,IAAI5E,EAAQQ,EACtCwF,sBAA8B,KAAIxF,EAClCyF,0BAAkC,IAAIjG,EAAMQ,EAC5C0F,cAAgB,IAAI1F,EACpB2F,gBAAkB,GAAG3F,EACrB4F,iBAAyB,IAAI1C,EAAMlD,EACnC6F,gBAAwB,IAAIrG,EAAMQ,EAxBnBiB,EAAAgE,EAAAnF,OAwBmBoB,EAAA+D,EAAA9D,iBAAAD,EAE1CE,OAAA,WAQI0E,EAAMC,GAAGC,EAAMC,UAAUC,WAAYxE,KAAKyE,YAAazE,MACvDoE,EAAMC,GAAGC,EAAMC,UAAUG,SAAU1E,KAAK2E,UAAW3E,MACnDoE,EAAMC,GAAGC,EAAMC,UAAUK,WAAY5E,KAAK6E,YAAa7E,MACvDoE,EAAMC,GAAGC,EAAMC,UAAUO,YAAa9E,KAAK+E,aAAc/E,OAC5DR,EAESwB,MAAV,gBAESgE,eACRxF,EAEDqF,YAAA,SAAYI,MACLjF,KAAK4D,WAAW,KAsBTsB,EAAKD,EAAME,YACXC,EAAKH,EAAMI,YACbC,EAAc,IAAIxH,EAClBqE,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAASsD,EAAIN,EAAKlF,KAAKgE,cACvE7B,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAASuD,EAAIL,EAAKpF,KAAKgE,cACvE7B,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAASwD,GAG7DvD,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAAWoD,OAW1D,GAAGtF,KAAK6D,yBAAyB,KAyB9B8B,EAAuBV,EAAMW,cAG3BC,GAFIF,EAAqBH,EAAIxF,KAAK8D,sBAAsB0B,GAAKxF,KAAKiE,gBAEnD,IAAO,GACtB6B,GAFIH,EAAqBF,EAAIzF,KAAK8D,sBAAsB2B,GAAKzF,KAAKiE,gBAEnD,IAAO,GACtB8B,EAAY5D,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAKS,cAAcZ,QAC1E+F,EAAY7D,EAAQC,WAAWC,cAAcM,mBAAmB9B,cAAcZ,QAG9EgG,EAAc9D,EAAQC,WAAWmD,iBAAiBtE,eAAe8E,EAAWC,EAAWH,EAAQ/H,EAAKwD,IACpG4E,EAAc/D,EAAQC,WAAWmD,iBAAiBtE,eAAegF,EAAaD,EAAWF,EAAQhI,EAAKqI,OAG5GhE,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAKS,cAAgBqF,OAC3DxD,mBAAqBwD,EAC1B/D,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAKgG,OAAOJ,QAGlDlC,sBAAwB6B,IAUrCnG,EAIAiF,YAAA,SAAYQ,GAKJA,EAAMoB,cAAgBC,EAAWC,mBAQ5BC,0BAA0BvB,GAOhCA,EAAMoB,cAAgBC,EAAWG,oBAE3B7C,YAAa,OACbE,sBAAwBmB,EAAMW,eAO/BX,EAAMoB,cAAgBC,EAAWI,mBAEhCF,0BAA0BvB,QAC1BpB,0BAA2B,OAC3BE,0BAA0B4C,IAAI1B,EAAM2B,eAAgB3B,EAAM4B,eAAgB,QAC1E/C,sBAAwBmB,EAAMW,gBAO3CpG,EAIAmF,UAAA,SAAUM,GAEN9C,EAAQC,WAAW0E,UAAUC,kBAAkB3G,KAAK4G,QAAS,EAIzD/B,EAAMoB,cAAgBC,EAAWG,mBAE5B7C,YAAa,EAMdqB,EAAMoB,cAAgBC,EAAWI,eAClCvE,EAAQC,WAAW0E,UAAUG,kBAAkB7G,KAAK4G,QAAS,KAAM7E,EAAQC,WAAW0E,UAAUG,kBAAkB7G,KAAK4G,QAAS,QAC9HnD,0BAA2B,IAOxCrE,EAIAuF,aAAA,SAAaE,OAELiC,EAAUjC,EAAMkC,aAGhBC,EAAe,IAAItJ,EACvBuJ,EAAKvJ,KAAKwJ,YAAYF,EAAcjF,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAAUC,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAKmH,QAASvH,KAAK2D,WAAauD,GACzK/E,EAAQC,WAAWmD,iBAAiB5F,OAAOS,KAAK8B,SAAWkF,GAE9D5H,EAKDgI,UAAA,WACIpD,EAAMqD,IAAInD,EAAMC,UAAUO,YAAa9E,KAAK+E,aAAc/E,MAC1DoE,EAAMqD,IAAInD,EAAMC,UAAUK,WAAY5E,KAAK6E,YAAa7E,OAG5DR,EAIAkI,oBAAA,SAAoBzC,OACZ0C,EAAM,IAAIC,EAASC,OACvB1F,EAAQC,WAAWmD,iBAAiB5F,OAAOmI,iBAAiB7C,EAAM2B,eAAgB3B,EAAM4B,eAAgBc,GACpGI,EAAcC,SAASC,eAAeN,GAAM,KAEtCO,EAASH,EAAcC,SAASG,wBAElCD,EAAOE,SAAShI,KAAKP,aAAawI,GAAS,KACvCC,EAAcnG,EAAQC,WAAWC,cAAckG,iBAAiBL,EAAOE,SAAShI,MACpF+B,EAAQC,WAAWoG,YAAYC,0BAA0BP,EAAOE,SAAShI,KAAMkI,MAM3F9I,EAIAgH,0BAAA,SAA0BvB,OAElB0C,EAAM,IAAIC,EAASC,OACvB1F,EAAQC,WAAWmD,iBAAiB5F,OAAOmI,iBAAiB7C,EAAM2B,eAAgB3B,EAAM4B,eAAgBc,GACpGI,EAAcC,SAASC,eAAeN,GAAM,KAEtCO,EAASH,EAAcC,SAASG,qBAIlCD,EAAOE,SAAShI,KAAKP,aAAawI,IAClClG,EAAQC,WAAWoG,YAAYE,0BAEL,GAAvB1I,KAAKwD,qBACCA,sBACAmF,cAAgBT,EAAOE,SAAShI,KAIrC+B,EAAQC,WAAWC,cAAcuG,4BACjCzG,EAAQC,WAAWC,cAAcO,aAAesF,EAAOE,SAAShI,KAChE+B,EAAQC,WAAWC,cAAcwG,6BAA6BX,EAAOE,SAAShI,OAOnD,GAAvBJ,KAAKwD,gBAAuBrB,EAAQC,WAAWC,cAAcO,cAAgBsF,EAAOE,SAAShI,MAEjG+B,EAAQC,WAAWmD,iBAAiBpF,QAAQ+H,EAAOE,SAAShI,WAIvDoD,eAAiB,GAEK,GAAvBxD,KAAKwD,gBAAuBrB,EAAQC,WAAWC,cAAcO,cAAgBsF,EAAOE,SAAShI,WAC5FuI,cAAgBT,EAAOE,SAAShI,KACrC+B,EAAQC,WAAWC,cAAcuG,4BACjCzG,EAAQC,WAAWC,cAAcO,aAAesF,EAAOE,SAAShI,KAChE+B,EAAQC,WAAWC,cAAcwG,6BAA6BX,EAAOE,SAAShI,aAGzEoD,eAAiB,EACtBrB,EAAQC,WAAWC,cAAcuG,6BAErCV,EAAOE,SAAShI,KAAKP,aAAawI,GAAQS,qBAEtCZ,EAAOE,SAAShI,KAAKP,aAAakJ,KACtC5G,EAAQC,WAAWC,cAAcuG,4BACjCzG,EAAQC,WAAWoG,YAAYE,0BAC/BvG,EAAQC,WAAWoG,YAAYQ,eAAiBd,EAAOE,SAAShI,KAChE+B,EAAQC,WAAWoG,YAAYS,iBAAiBf,EAAOE,SAAShI,MAChE+B,EAAQC,WAAWoG,YAAYQ,eAAenJ,aAAakJ,GAAMG,6BAKhE1F,eAAiB,EACtBrB,EAAQC,WAAWoG,YAAYE,2BAKvClJ,EAGA2J,YAAA,WAEIhH,EAAQC,WAAWC,cAAc+G,qBACjCjH,EAAQC,WAAWC,cAAcuG,4BAEjCzG,EAAQC,WAAWoG,YAAYa,kBAC/BlH,EAAQC,WAAWoG,YAAYE,0BAE/BvG,EAAQC,WAAWmD,iBAAiBtD,gBAEpCE,EAAQC,WAAW0E,UAAUwC,kBAAmB,EAChDnH,EAAQC,WAAW0E,UAAUyC,YAAYvC,QAAS,EAElD7E,EAAQC,WAAWoH,cAAcC,aAIrCjK,EAGAwF,YAAA,WAEI7C,EAAQC,WAAWC,cAAc+G,qBACjCjH,EAAQC,WAAWC,cAAcqH,yBACjCvH,EAAQC,WAAWC,cAAcuG,4BAEjCzG,EAAQC,WAAWoG,YAAYa,kBAC/BlH,EAAQC,WAAWoG,YAAYE,0BAE/BvG,EAAQC,WAAWmD,iBAAiBtD,gBAEpCE,EAAQC,WAAW0E,UAAUwC,kBAAmB,EAChDnH,EAAQC,WAAW0E,UAAUyC,YAAYvC,QAAS,EAElD7E,EAAQC,WAAWoH,cAAcC,aAGpClG,GA9W8BV,IAASpD,2BAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,8BAIZ,QADLC,EACS/E,KAAA+E,MA6WnCC,IAAAC;;qTCzXO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,sBAEhBF,EAAQ,WAAWG,CAAAwF,WAAA9E,YAAAuL,WAAAvL,EAAAU,WAAAN,wBAAAe,EAAAoK,EAAAvL,GAAAuL,GACU9G,KAASK,iBAId,CACrB0G,QAAS,EACTC,MAAO,EACPC,KAAM,EACNC,OAAQ,MACV5G,IAAAC;;6UCZM7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,iCAWhBF,EAAQ,sBAAsBG,GAAAS,WAAAC,YAAA4L,WAAA5L,EAAAU,WAAAN,wBAAAe,EAAAyK,EAAA5L,GAI3B4L,EACc3F,GAAd,SAAiB4F,EAAkBC,EAAYhJ,GACvClB,KAAKmK,OAAOF,UACPE,OAAOF,GAAa,QAGvBG,EAAmB,CAACC,KAAMH,EAAIhJ,OAAAA,QAC/BiJ,OAAOF,GAAWK,KAAKF,IAKhCJ,EACcvC,IAAd,SAAkBwC,EAAkBC,EAAchJ,OACxCqJ,EAAOvK,KAAKmK,OAAOF,MACrBM,KAAQA,EAAK9L,QAAU,OAGvB,IAAI+L,EAAI,EAAGA,EAAID,EAAK9L,OAAQ+L,IAAI,KAC1BvF,EAAQsF,EAAKC,MAChBvF,EAAMoF,OAASH,KAAQhJ,GAAUA,IAAU+D,EAAM/D,QAAQ,CACxDqJ,EAAKE,OAAOD,EAAG,YAO3BR,EACcU,cAAd,SAA6BT,OACnBM,EAAOvK,KAAKmK,OAAOF,MACrBM,KAAQA,EAAK9L,QAAU,YAE1BF,EAAAC,UAAAC,OAJ8CC,MAAIC,MAAAJ,IAAAA,OAAAK,IAAAA,EAAAL,EAAAK,IAAJF,EAAIE,KAAAJ,UAAAI,OAM/C,IAAI4L,EAAI,EAAGA,EAAID,EAAK9L,OAAQ+L,IAAI,KAC1BvF,EAAQsF,EAAKC,GACnBvF,EAAMoF,KAAKvL,MAAMmG,EAAM/D,OAAQxC,MAEtCsL,GA1CoCnH,IACvBsH,OAAiB,GAFJjH,EAEM/E,KAAA+E,KA0CpCC,IAAAC;;yTCvDO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,wBAEhBF,EAAQ,aAAaG,CAAAwF,WAAA9E,YAAAuM,YAAArM,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,WAEXkM,IAAa,GAAEtM,EACfuM,aAAKvM,SAHMiB,EAAAoL,EAAAvM,GAGNuM,GAFgB9H,KAASK,KAGxCC,IAAAC;;8kBCDO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,mBAGAC,EADhBH,EAAQ,QAAOI,EAGXF,EAAS4K,GAAOxK,EAEhBJ,EAAS4K,GAAOtK,EAGhBN,EAASqN,GAAS9M,EAElBP,EAASqN,GAASC,EAElBtN,EAASqN,GAASE,EAElBvN,EAASqN,GAASG,EAElBxN,EAASyN,QAAOC,EAEhB1N,EAAS2N,GAAUC,EAEnB5N,EAASqN,GAASQ,EAElB7N,EAAS8N,SAAQ7N,GArBaO,EAAAC,GAqBbC,WAAAC,YAAA2K,YAAAzK,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,gBAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,cAAAY,EAAAD,EAAAX,IAAAU,EAAAV,aAAAa,EAAAF,EAAAX,IAAAU,EAAAV,WAAAc,EAAAH,EAAAX,IAAAU,EAAAV,UAAAkN,EAAAvM,EAAAX,IAAAU,EAAAV,UAAAmN,EAAAxM,EAAAX,IAAAU,EAAAV,eAAAoN,EAAAzM,EAAAX,IAAAU,EAAAV,SAAAqN,EAAA1M,EAAAX,IAAAU,EAAAV,SAAAsN,EAAA3M,EAAAX,IAAAU,EAAAV,eAAAuN,EAAA5M,EAAAX,IAAAA,EAAAiB,EAAAwJ,EAAA3K,OAAAoB,EAAAuJ,EAAAtJ,iBAQlBD,EAKOiJ,0BAAP,SAAiCqD,EAAgBC,QACxCC,YAAcF,EAAUjM,aAAawI,QACrC4D,UAAYF,EAAQlM,aAAawI,OAClCrH,EAAQ8K,EAAUjL,cAAeqL,EAAMH,EAAQlL,cAG7CM,EAAUH,EAAMf,QAASa,IAAIoL,GAAKxL,eAAe,SAClDN,KAAK+L,iBAAiBhL,OAGrB1C,EAASX,EAAKsO,SAASpL,EAAMkL,GAAK,OACnC9L,KAAKiM,SAAS,KAAO5N,EAAQ,UAE5BgD,EAAM3D,EAAK6D,SAAS,IAAI7D,EAAQoO,EAAKlL,GAAOd,YAC5CoM,EAAQ,IAAIxO,EAAK,EAAG,EAAG,GACvByO,EAAO,IAAIlF,EAAK7F,KACtB6F,EAAK7F,KAAKgL,WAAWD,EAAMD,EAAO7K,QAC7BrB,KAAKqM,YAAYF,QAGjBG,MAAQ1M,KAAKgM,YAAYW,mBACzBC,MAAQ5M,KAAKiM,UAAUU,eAqBhCnN,EAKOyC,cAAP,SAAqB6J,EAAgBC,OAC7B/K,EAAQ8K,EAAUjL,cAAeqL,EAAMH,EAAQlL,cAC7CM,EAAUH,EAAMf,QAASa,IAAIoL,GAAKxL,eAAe,SAClDN,KAAK+L,iBAAiBhL,OAGrB1C,EAASX,EAAKsO,SAASpL,EAAMkL,GAAK,OACnC9L,KAAKiM,SAAS,KAAO5N,EAAQ,UAE5BgD,EAAM3D,EAAK6D,SAAS,IAAI7D,EAAQoO,EAAKlL,GAAOd,YAC5CoM,EAAQ,IAAIxO,EAAK,EAAG,EAAG,GACvByO,EAAO,IAAIlF,EAAK7F,KACtB6F,EAAK7F,KAAKgL,WAAWD,EAAMD,EAAO7K,QAC7BrB,KAAKqM,YAAYF,IAG1B/M,EAMOqN,+BAAP,WACqE,MAA9D1K,EAAQC,WAAWC,cAAcyK,cAAc9M,KAAK0M,SAEnDvK,EAAQC,WAAWC,cAAcyK,cAAc9M,KAAK0M,OAAS,IAEA,MAA9DvK,EAAQC,WAAWC,cAAcyK,cAAc9M,KAAK4M,SAEnDzK,EAAQC,WAAWC,cAAcyK,cAAc9M,KAAK4M,OAAS,SAG5DZ,YAAYe,oBAAoB/M,WAChCiM,UAAUc,oBAAoB/M,MAEnCmC,EAAQC,WAAWoG,YAAYwE,cAAchN,KAAKiN,QAAU,CAACjN,KAAK0M,MAAO1M,KAAK4M,QAGlFpN,EAIO0N,UAAP,kBACWlN,KAAKiN,QAGhBzN,EAMO2N,4BAAP,eACQC,EAAgBpN,KAAKH,aAAawN,GAAcC,YAAY,QAC3DlN,KAAKP,aAAawN,GAAcE,YAAYH,EAAc,IAGnE5N,EAGOgO,wBAAP,eACQC,EAAkBzN,KAAKH,aAAawN,GAAcC,YAAY,QAC7DzN,aAAawN,GAAcE,YAAYE,EAAiB,IAGjEjO,EAIOkO,aAAP,SAAoBC,OACX,IAAI/C,KAAO+C,EACR3N,KAAK4N,eAAehD,UACfA,GAAO+C,EAAU/C,SAGzBqC,OAASjN,KAAK0M,MAAO,IAAI1M,KAAK6N,SAAS,IAAI7N,KAAK4M,MAErDzK,EAAQC,WAAW0L,gBAAgBC,UAAU/N,KAAKiN,SAGlDzN,EAGG0J,gBAAP,WAOI/G,EAAQC,WAAW0E,UAAUkH,YAAY,aAAahO,KAAK6N,UAC3D1L,EAAQC,WAAW0E,UAAUkH,YAAY,WAAWhO,KAAKiN,QACzD9K,EAAQC,WAAW0E,UAAUmH,YAAY,iBAAiBjO,KAAK0M,OAC/DvK,EAAQC,WAAW0E,UAAUmH,YAAY,iBAAiBjO,KAAK4M,YAO1DsB,gBAAgBlO,KAAKmO,WAAW,cACrChM,EAAQC,WAAW0E,UAAUmH,YAAY,QAAQjO,KAAKoO,OAEzD5O,EAEO0O,gBAAR,SAAwBG,EAAKC,OACnB,IAAI1D,cADe0D,IAAAA,EAAY,IACpBD,EAAK,KACfE,EAASD,EAAeA,MAAa1D,EAAQA,EACzB,iBAAbyD,EAAIzD,IAAkC,OAAbyD,EAAIzD,QACjCsD,gBAAgBG,EAAIzD,GAAM2D,GAEhCpM,EAAQC,WAAW0E,UAAUmH,YAAYrD,EAAI,KAAK5K,KAAKmO,WAAWvD,MAGzE7B,GAnMqBlG,IAASpD,yBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAAA/D,EAAAhB,EAAAC,EAAAsB,uBAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,sBAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,6BAQN,MAAE7D,EAAAlB,EAAAC,EAAAsB,oBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,6BAEJ,MAAEuI,EAAAtN,EAAAC,EAAAsB,mBAAAsL,IAAAjI,gBAAAC,cAAAC,YAAAC,6BAEH,MAAEwI,EAAAvN,EAAAC,EAAAsB,mBAAAuL,IAAAlI,gBAAAC,cAAAC,YAAAC,6BAEF,MAAEyI,EAAAxN,EAAAC,EAAAsB,wBAAAwL,IAAAnI,gBAAAC,cAAAC,YAAAC,8BAEI,IAAIiI,UAAQS,EAAAzN,EAAAC,EAAAsB,kBAAA0L,IAAArI,gBAAAC,cAAAC,YAAAC,8BAElB,KAAC2I,EAAA1N,EAAAC,EAAAsB,kBAAA4L,IAAAvI,gBAAAC,cAAAC,YAAAC,6BAED,UAAM4I,EAAA3N,EAAAC,EAAAsB,wBAAA6L,IAAAxI,gBAAAC,cAAAC,YAAAC,8BAEA,KADVC,EACe/E,KAAA+E,MA+KpCC,IAAAC;;+jBCxMO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,0BAKOC,EADvBH,EAAQ,eAAcI,EAGlBF,EAAS,CAAE4F,KAAMmL,IAAS3Q,EAG1BJ,EAAS6F,GAAK5F,GALuBO,EAAAC,GAKvBC,WAAAC,YAAAqQ,YAAAnQ,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,eAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,mBAAAY,EAAAD,EAAAX,IAGfA,EAIO0O,cAAwC,GAAE1O,EAPlCiB,EAAAkP,EAAArQ,OAOkCoB,EAAAiP,EAAAhP,iBAEjDD,EAKAiJ,0BAAA,SAA0BqD,EAAiBC,OACjC2C,EAAWC,EAAY3O,KAAK4O,mBAElCF,EAASG,UAAU1M,EAAQC,WAAWoG,YAAYpI,MACvCsO,EAAS7O,aAAakJ,GAE5BN,0BAA0BqD,EAAUC,GAIlC2C,GAGVlP,EAGDyJ,iBAAA,SAAiByF,GACbA,EAAS7O,aAAakJ,GAAMoE,+BAC/B3N,EAEMkJ,wBAAP,WAEQ1I,KAAKgJ,sBACJA,eAAenJ,aAAakJ,GAAMyE,+BAClCxE,eAAiB,KACtB7G,EAAQC,WAAW0E,UAAUgI,2BAGhCtP,EAEMuP,kBAAP,mBAEuCC,EAAnCC,EAAAC,EAAiBlP,KAAKI,KAAK+O,YAAQH,EAAAC,KAAAG,MAAC,CAAvBJ,EAAAnE,MAEHhL,aAAakJ,GAAMsG,YAAa,IAK9C7P,EAGA6J,gBAAA,gBACSjJ,KAAKgJ,0BACLhJ,KAAKkP,qBAEbb,GAjE4B5L,IAASpD,wBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,8BAGV,QAAI/D,EAAAhB,EAAAC,EAAAsB,4BAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAEjBC,EAFiB/E,KAAA+E,MAiEnCC,IAAAC;;qWC7EO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,yBAGhBF,EAAQ,cAAcG,CAAAwF,WAAA9E,YAAAmR,WAAAnR,EAAAU,WAAAN,iBAAAe,EAAAgQ,EAAAnR,OAAAoB,EAAA+P,EAAA9P,iBAAAD,EAETwB,MAAV,aAOAxB,EAIOgQ,WAAP,SAAkBC,GACdtN,EAAQC,WAAWK,cAAc0G,cACjChH,EAAQC,WAAWsN,WAAWC,YAAYF,IAC7CjQ,EAEMoQ,kBAAP,SAAyBC,GACrB1N,EAAQC,WAAWsN,WAAWI,cAAcD,IAC/CN,GAnB4B1M,KAASK,KAoBzCC,IAAAC;;qOCzBO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,yBAEhBF,EAAQ,cAAcG,CAAAwF,sBAAA6M,YAAAA,EAEZC,KAAP,SAAYP,EAAarF,UACd,IAAI6F,SAAQ,SAACC,EAASC,OACnBC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,OAAQb,GAAK,GACtBW,EAAIG,iBAAiB,eAAgB,kCACrCH,EAAII,mBAAqB,WACE,IAAnBJ,EAAIK,aACe,MAAfL,EAAIM,OACJR,EAAQS,KAAKC,MAAMR,EAAIS,eAEvBV,EAAO,IAAIW,MAAMV,EAAIW,eAIjCX,EAAIJ,KAAKW,KAAKK,UAAU5G,QAE/B2F,OAAA7M,KACJC,IAAAC;;4lBCrBO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,yBAQMC,EADtBH,EAAQ,cAAaI,EAGjBF,EAAS,CAAC4F,KAAM,CAAC4N,KAAYvT,GAFOO,EAAAC,GAEPC,WAAAC,YAAAsR,YAAApR,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,mBAAAL,EAAAgB,EAAAX,IAAAA,EAAAiB,EAAAmQ,EAAAtR,OAAAoB,EAAAkQ,EAAAjQ,iBAK9BD,EAIO0R,eAAP,SAAsBC,OAAcC,OAM5BC,EAAO,YAAcF,OACpBG,SAASD,GAAM,SAACE,GACnBH,EAAKI,0BAA0BD,OASnC/R,EACM8R,SAAR,SAAiBD,EAAcI,GACzBC,EAAUC,KAAKN,GAAM,SAACO,EAAUC,MAC5BD,EACAE,EAAMF,EAAIG,SAAWH,YAKrBL,EADWM,EAAIG,KACG5H,KAAK,GAAGA,KAAKmH,OACnCE,EAASF,QAKZ/R,EAGIyS,UAAP,SAAiBC,OAEPC,GADQ,KAAOC,SAASC,QACVC,MAAM,KAAOJ,EAAO,QACnB,IAAjBC,EAAM1T,OAAc,OAAO8T,mBAAmBJ,EAAM/O,MAAMkP,MAAM,KAAKE,UAE7EhT,EAIOmQ,YAAP,SAAmBF,OAAWgD,OAI5BC,MAAMjD,GAAKkD,MAAK,SAACC,UAEfC,QAAQC,IAAIF,GACLA,EAASZ,UACZW,MAAK,SAAC9H,OAEN0G,EAAS1G,EAAMT,KAAK,GAAGA,KAAKmH,OAChCkB,EAAKjB,0BAA0BD,MAPjCmB,OAQO,SAACZ,UAAUe,QAAQf,MAAM,eAAgBA,OAEjDtS,EAEMsQ,cAAP,SAAqBiD,OAEfxB,EAASwB,EAAS3I,KAAK,GAAGA,KAAKmH,YAC9BC,0BAA0BD,IAEhC/R,EAGOgS,0BAAR,SAAkCD,OAC5B,IAAI/G,EAAI,EAAGA,EAAI+G,EAAO9S,OAAQ+L,IAAK,KACjCwI,EAAQzB,EAAO/G,GAAGyI,iBAClBC,EAAW3B,EAAO/G,GAAG2I,oBAMrBC,EAAOJ,EAAM,GAAIhH,EAAckH,EAAS,GAAGjH,EAAYiH,EAAS,GAChEpH,EAAY,KAAMC,EAAU,KAAM2C,EAAU,KAE5C2E,EAAsBlR,EAAQC,WAAW0L,gBAAgBwF,YAAYtH,EAAYuH,KACjFC,EAAmBrR,EAAQC,WAAW0L,gBAAgBwF,YAAYrH,EAAUsH,KAC9DpR,EAAQC,WAAW0L,gBAAgB2F,UAAUzH,EAAYuH,IAAI,IAAIH,EAAKvF,SAAS,IAAI5B,EAAUsH,OAKzGF,GAAwBG,EAiBpBH,IAAwBG,GAE5B1H,EAAY3J,EAAQC,WAAWC,cAAcqR,mBAAmB1H,EAAYuH,MAC5ExH,EAAU5J,EAAQC,WAAWC,cAAckG,iBAAiBuD,IACpDjM,aAAawI,GAAQqF,aAAazB,IAC1CyC,EAAWvM,EAAQC,WAAWoG,YAAYC,0BAA0BqD,EAAWC,IACtElM,aAAakJ,GAAM2E,aAAa0F,GACzC1E,EAAS7O,aAAakJ,GAAM8D,iCAE5Bf,EAAUjM,aAAawI,GAAQsL,uBAC/B5H,EAAQlM,aAAawI,GAAQsL,uBAC7BxR,EAAQC,WAAW0L,gBAAgB8F,kBAAkB9H,EAAUjM,aAAawI,IAC5ElG,EAAQC,WAAW0L,gBAAgB8F,kBAAkB7H,EAAQlM,aAAawI,MAIrEgL,GAAuBG,GAE9BzH,EAAU5J,EAAQC,WAAWC,cAAcqR,mBAAmBzH,EAAUsH,MACxEzH,EAAY3J,EAAQC,WAAWC,cAAckG,iBAAiBwD,IACpDlM,aAAawI,GAAQqF,aAAa1B,IAC5C0C,EAAWvM,EAAQC,WAAWoG,YAAYC,0BAA0BqD,EAAWC,IACtElM,aAAakJ,GAAM2E,aAAa0F,GACzC1E,EAAS7O,aAAakJ,GAAM8D,iCAE5Bf,EAAUjM,aAAawI,GAAQsL,uBAC/B5H,EAAQlM,aAAawI,GAAQsL,uBAC7BxR,EAAQC,WAAW0L,gBAAgB8F,kBAAkB9H,EAAUjM,aAAawI,IAC5ElG,EAAQC,WAAW0L,gBAAgB8F,kBAAkB7H,EAAQlM,aAAawI,KAIpEgL,GAAuBG,IAE7B1H,EAAY3J,EAAQC,WAAWC,cAAcqR,mBAAmB1H,EAAYuH,KAC5ExH,EAAU5J,EAAQC,WAAWC,cAAcqR,mBAAmBzH,EAAUsH,MACxE7E,EAAWvM,EAAQC,WAAWoG,YAAYC,0BAA0BqD,EAAWC,IACtElM,aAAakJ,GAAM2E,aAAa0F,GACzC1E,EAAS7O,aAAakJ,GAAM8D,iCAE5Bf,EAAUjM,aAAawI,GAAQsL,uBAC/B5H,EAAQlM,aAAawI,GAAQsL,uBAC7BxR,EAAQC,WAAW0L,gBAAgB8F,kBAAkB9H,EAAUjM,aAAawI,IAC5ElG,EAAQC,WAAW0L,gBAAgB8F,kBAAkB7H,EAAQlM,aAAawI,OA1DxEyD,EAAY3J,EAAQC,WAAWC,cAAcwR,mBACnChU,aAAawI,GAAQqF,aAAa1B,IAC5CD,EAAU5J,EAAQC,WAAWC,cAAckG,iBAAiBuD,IACpDjM,aAAawI,GAAQqF,aAAazB,IAC1CyC,EAAWvM,EAAQC,WAAWoG,YAAYC,0BAA0BqD,EAAWC,IACtElM,aAAakJ,GAAM2E,aAAa0F,GACzC1E,EAAS7O,aAAakJ,GAAM8D,iCAE5Bf,EAAUjM,aAAawI,GAAQsL,uBAC/B5H,EAAQlM,aAAawI,GAAQsL,uBAC7BxR,EAAQC,WAAW0L,gBAAgB8F,kBAAkB9H,EAAUjM,aAAawI,IAC5ElG,EAAQC,WAAW0L,gBAAgB8F,kBAAkB7H,EAAQlM,aAAawI,QAmFrFqH,GAlM6B7M,IAASpD,4BAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAEPC,EAFO/E,KAAA+E,MAmMxCC,IAAAC;;udCxMO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,2BAEhBF,EAAQ,gBAAgBG,CAAAwF,WAAA9E,YAAA0V,YAAAxV,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,WAEbqV,aAAe,GAAGzV,EAEnB0V,mBAAqB,EAAG1V,EAExB2V,eAAiB,IAAK3V,EAErB4V,yBAAqC,EAAVC,KAAKC,GAAO,GAAE9V,EAR5BiB,EAAAuU,EAAA1V,OAQ4BoB,EAAAsU,EAAArU,iBAGjDD,EAIO6U,kBAAP,eACQC,EAAe,cAO6CtF,EAA5DC,EAAAC,EAAe/M,EAAQC,WAAWC,cAAckS,gBAAYvF,EAAAC,KAAAG,MAAC,KAArDoF,EAAGxF,EAAAnE,UACH1I,EAAQC,WAAWC,cAAcC,SAASmS,eAAeD,GAC7D,KACQE,EAAa,IAAIpR,EAAKkR,GAC1BE,EAAWC,OAASxS,EAAQC,WAAWC,cAAcC,SACrDoS,EAAWxC,KAAOsC,OACbT,aAAazJ,KAAKoK,SAKzBvS,EAAQC,WAAWC,cAAcC,SAAS6M,SAAS1Q,OAASuB,KAAK+T,aAAatV,QAAQ,KAEpF6J,EAAcnG,EAAQC,WAAWC,cAAcC,SAAS6M,SAASmF,MAC9B,MAApChM,EAAYzI,aAAawI,GAAiB,KACrCuM,EAAatM,EAAYzI,aAAawI,GAAQwM,KAAK,GACvDvM,EAAYuG,UAAU1M,EAAQC,WAAWC,cAAcC,SAASmS,eAAeG,SAI/EN,KAMZ,MAAMxC,GACFe,QAAQC,IAAIhB,QAGXoC,yBAA2BC,KAAKC,GAAK,EAAIpU,KAAK+T,aAAatV,QAKpEe,EAIOsV,kBAAP,SAAyBC,QAChBhB,aAAe,GACpBlB,QAAQC,IAAI,YAAaiC,WACEC,EAA3BC,EAAA/F,EAAmB6F,KAAQC,EAAAC,KAAA7F,MAAC,KAApB8F,EAAOF,EAAAnK,WACNkJ,aAAazJ,KAAKnI,EAAQC,WAAWC,cAAcC,SAASmS,eAAeS,MAKxF1V,EAGO2V,eAAP,mBAKQhU,EAASgB,EAAQC,WAAWC,cAAcC,SAASzB,cACnDuU,EAAQpV,KAAK+T,aAAa,GAAG5E,SAC7BkG,EAAY,EAAIlB,KAAKC,GAAKgB,EAAM3W,OAC3B+L,EAAI,EAAGA,EAAI4K,EAAM3W,OAAQ+L,IAAK,KAC/BpJ,EAAQoJ,EAAI6K,EAGZ7P,EAAIrE,EAAOqE,EAAIxF,KAAKgU,mBAAqBG,KAAKmB,IAAIlU,GAClDqE,EAAItE,EAAOsE,EACXC,EAAIvE,EAAOuE,EAAI1F,KAAKgU,mBAAqBG,KAAKoB,IAAInU,GAEtDgU,EAAM5K,GAAG2B,iBAAiB3G,EAAGC,EAAGC,GAChC0P,EAAM5K,GAAG3K,aAAawI,GAAQgH,YAAa,UAQtBmG,EAAzBC,EAAAvG,EAAoBkG,KAAKI,EAAAC,KAAArG,MAAC,KAAlBsG,EAAQF,EAAA3K,WAGH8K,uBAAuBD,KAaxClW,EAIQmW,uBAAR,SAA+B3J,WAWsC4J,EAP7DC,EAAU7J,EAAYnM,aAAawI,GAAQyN,iBAAiBrX,OAM5DsX,GAAsB,EAC1BC,EAAA9G,EAAgBlD,EAAYnM,aAAawI,GAAQyN,oBAAgBF,EAAAI,KAAA5G,MAAC,CAExC,GAFdwG,EAAA/K,MAEAwE,aAAqB0G,GAAsB,OAKpDA,OACC5U,EAAS6K,EAAYnL,cAGrBoV,EAAS,IAAInY,EACjBA,EAAKoY,MAAMD,EAAQnY,EAAK6D,SAAS,IAAI7D,EAAQqD,EAAQrD,EAAKqY,MAAOrY,EAAKwD,IACtExD,EAAKoC,UAAU+V,EAAQA,OAKnBG,EAAgB,IAAItY,EAExBsY,EAAgBtY,EAAK6D,SAAS,IAAI7D,EAAQqD,EAAQrD,EAAKqY,MACvDrY,EAAKoC,UAAUkW,EAAeA,WAE1BC,EAAiBlC,KAAKC,GAAKyB,EAC3BS,EAA0B,EAAVnC,KAAKC,GAAO,EAC5BmC,EAAY,EAGR/L,EAAI,EAAGA,EAAIwB,EAAYnM,aAAawI,GAAQyN,iBAAiBrX,OAAQ+L,IAAI,KACzE4I,EAAOpH,EAAYnM,aAAawI,GAAQyN,iBAAiBtL,OAC1D4I,EAAK/D,gBACJpD,EAAYmH,EAAKnH,UAKjBuK,EAAuBxW,KAAKyW,YAAYxK,EAAUpM,aAAawI,GAAQwM,KAAK,IAAM7U,KAAKkU,yBACvF3H,EAAO,IAAI/K,EACXkV,EAAa,IAAI5Y,EAEjB6Y,EAAoB,IAAI7Y,KAC5B0D,EAAKO,cAAcwK,EAAM0J,EAAQO,GAEjC1Y,EAAKkE,cAAc2U,EAAmBP,EAAe7J,GACrD/K,EAAKO,cAAcwK,EAAM6J,EAAeI,GAExC1Y,EAAKkE,cAAc0U,EAAYT,EAAQ1J,GAEpC6G,EAAKpH,YAAYuH,KAAOvH,EAAYnM,aAAawI,GAAQkL,MACxDtH,EAAYmH,EAAKpH,cAEjBC,EAAUoD,WAAW,KAEjBnN,EAAW,IAAIpE,EACf8Y,EAAmB,IAAI9Y,EAC3ByY,EAAYD,EAAeD,EAAgBrW,KAAK6W,gBAAgBzD,EAAMpH,EAAYnM,aAAawI,GAAQyN,kBACvGhY,EAAK4C,eAAekW,EAAiBD,EAAkB1W,QAASD,KAAKiU,oBAEjE6C,EAAa,IAAItV,EACrBA,EAAKO,cAAc+U,EAAYJ,EAAWH,GAI1CzY,EAAKkE,cAAc4U,EAAkBA,EAAkBE,GAEvDhZ,EAAKgD,IAAIoB,EAAUf,EAAOlB,QAAS2W,GACnC3K,EAAU7L,KAAK+L,iBAAiBjK,GAEhC+J,EAAUoD,YAAa,EAY3B+D,EAAKnR,cAAc+J,EAAaC,EAAU7L,MAC1CgT,EAAK/D,YAAa,OACbsG,uBAAuB1J,EAAU7L,UAQ9CZ,EAGOuX,oBAAP,mBAGwCC,EAFhCC,EAAW,EAEfC,EAAAhI,EAAmBlP,KAAK+T,gBAAYiD,EAAAE,KAAA9H,MAAC,SACM+H,EADnCC,EAAOJ,EAAAnM,MACXwM,EAAAnI,EAAuBkI,EAAQjI,YAAQgI,EAAAE,KAAAjI,MAAC,KAAhC9G,EAAW6O,EAAAtM,MACfvC,EAAYzI,aAAawI,GAAQiP,gBAAgBL,GACjD3O,EAAYzI,aAAawI,GAAQkP,eAAeN,GAEpDA,MAIRzX,EAKQiX,YAAR,SAAoBjC,OACZ,IAAIgD,EAAQ,EAAGA,EAAQxX,KAAK+T,aAAatV,OAAQ+Y,OAC9CxX,KAAK+T,aAAayD,GAAOtF,MAAQsC,EAAK,OAAOgD,SAE5C,GAGZhY,EAMQqX,gBAAR,SAAwBY,EAAalN,OAC7B,IAAIiN,EAAQ,EAAGA,EAAQjN,EAAK9L,OAAQ+Y,OACjCjN,EAAKiN,IAAUC,EAAS,OAAOD,SAE9B,GAGZhY,EAIOkY,QAAP,mBAEwCC,EADhCC,EAAU,GACdC,EAAA3I,EAAmBlP,KAAK+T,gBAAY4D,EAAAE,KAAAzI,MAAC,KAA7BgI,EAAOO,EAAA9M,MACX+M,EAAQtN,KAAK8M,EAAQlF,aAElB0F,GACVpY,EAEMiK,UAAP,gBACSsK,aAAe,GACpB5R,EAAQC,WAAW0L,gBAAgBgK,aAAe,GAClD3V,EAAQC,WAAW0L,gBAAgBiK,mBAAqB,GAC3DjE,GAnR8BjR,KAASK,KAoR3CC,IAAAC;;02BClRO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,sBAGGC,EADnBH,EAAQ,WAAUI,EAIdF,EAASY,GAAiBR,EAG1BJ,EAASua,GAAcja,EAGvBN,EAAS8F,GAAcvF,EAGvBP,EAASgR,GAAY1D,EAGrBtN,EAASwa,GAAgBjN,EAGzBvN,EAASqJ,GAAUmE,EAGnBxN,EAASiS,GAAWvE,EAGpB1N,EAASqW,GAAcpW,IAAAwa,WAAA9Z,YAAA+D,YAAA7D,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,qBAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,kBAAAY,EAAAD,EAAAX,IAAAU,EAAAV,kBAAAa,EAAAF,EAAAX,IAAAU,EAAAV,gBAAAc,EAAAH,EAAAX,IAAAU,EAAAV,oBAAAkN,EAAAvM,EAAAX,IAAAU,EAAAV,cAAAmN,EAAAxM,EAAAX,IAAAU,EAAAV,eAAAoN,EAAAzM,EAAAX,IAAAU,EAAAV,kBAAAqN,EAAA1M,EAAAX,IAAAA,SAAAiB,EAAA4C,EAAA/D,GAAA+D,EAAA1C,UAKdC,OAAV,WACImT,QAAQC,IAAI,YACZqF,EAAQpQ,cAAcC,SAASoQ,QAAS,EACxCjW,EAAQ6F,SAASzC,iBAAmBvF,KAAKI,KAAKqU,eAAe,oBAAoB5U,aAAaxB,GAC9F8D,EAAQ6F,SAAS3F,cAAgBrC,KAAKI,KAAKqU,eAAe,UAAUA,eAAe,iBAAiB5U,aAAamY,GACjH7V,EAAQ6F,SAASvF,cAAgBzC,KAAKI,KAAKqU,eAAe,iBAAiB5U,aAAa0D,GACxFpB,EAAQ6F,SAASQ,YAAcxI,KAAKI,KAAKqU,eAAe,eAAe5U,aAAa4O,GACpFtM,EAAQ6F,SAAS8F,gBAAkB9N,KAAKI,KAAKqU,eAAe,mBAAmB5U,aAAaoY,GAC5F9V,EAAQ6F,SAASlB,UAAY9G,KAAKI,KAAKqU,eAAe,UAAUA,eAAe,aAAa5U,aAAaiH,GACzG3E,EAAQ6F,SAAS0H,WAAa1P,KAAKI,KAAKqU,eAAe,cAAc5U,aAAa6P,GAClFvN,EAAQ6F,SAASwB,cAAgBxJ,KAAKI,KAAKqU,eAAe,iBAAiB5U,aAAaiU,GACxF3R,EAAQC,WAERyQ,QAAQC,IAAI,SAAU3Q,EAAQ6F,SAASQ,cAC1CrG,EAKMC,SAAP,kBACQD,EAAQ6F,WACR7F,EAAQ6F,SAAW,IAAI7F,GAGpBA,EAAQ6F,UAClB7F,GAtDwBU,IA2BlBmF,SAAmB,IAAI7F,EAASlE,EAAAC,GAHfC,EAGe+Z,GAAAzY,8BAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAAA/D,EAAAhB,EAAAC,EAAAsB,2BAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,2BAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,mBAAA7D,EAAAlB,EAAAC,EAAAsB,yBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,mBAAAuI,EAAAtN,EAAAC,EAAAsB,6BAAAsL,IAAAjI,gBAAAC,cAAAC,YAAAC,mBAAAwI,EAAAvN,EAAAC,EAAAsB,uBAAAuL,IAAAlI,gBAAAC,cAAAC,YAAAC,mBAAAyI,EAAAxN,EAAAC,EAAAsB,wBAAAwL,IAAAnI,gBAAAC,cAAAC,YAAAC,mBAAA0I,EAAAzN,EAAAC,EAAAsB,2BAAA0L,IAAArI,gBAAAC,cAAAC,YAAAC,mBAHfC,EAGe/E,KAAA+E,MA6B1CC,IAAAC;;ueCnEO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,8BAIWC,EAD3BH,EAAQ,mBAAkBI,EAGtBF,EAAS,CAAE4F,KAAKgV,MAAMxa,EAGtBJ,EAAS,CAAE4F,KAAKgV,MAAKta,EAIrBN,EAAS2N,GAAUpN,EAGnBP,EAAS2N,GAAU1N,GAZsBO,EAAAC,GAYtBC,WAAAC,YAAA6Z,YAAA3Z,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,gBAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,cAAAY,EAAAD,EAAAX,IAAAU,EAAAV,gBAAAa,EAAAF,EAAAX,IAAAU,EAAAV,cAAAc,EAAAH,EAAAX,IAAAA,EAIbwZ,aAAqC,GAAExZ,EAEvCyZ,mBAAqB,EAACzZ,EANTiB,EAAA0Y,EAAA7Z,OAMSoB,EAAAyY,EAAAxY,iBAAAD,EAEnBE,OAAV,gBACS4Y,YAAc,IAAID,SAClBE,UAAY,IAAIF,KAGzB7Y,EAIOgZ,YAAP,mBAAqCC,EAAAja,UAAAC,OAAfC,MAAIC,MAAA8Z,GAAAC,IAAAA,EAAAD,EAAAC,IAAJha,EAAIga,GAAAla,UAAAka,MAEJ,GAAfha,EAAKD,OAAY,KACXka,EAAKja,iBACL4Z,YAAYxX,IAAI6X,QAChBC,cACED,cAGFC,mBACAN,YAAYxX,IAAK,GAAKd,KAAK4Y,aACzB,GAAK5Y,KAAK4Y,aAQzBpZ,EAGOqZ,aAAP,SAAoBtF,GAEbvT,KAAKsY,YAAYQ,IAAIvF,UACf+E,YAAL,OAAwB/E,QACnBqF,gBAGZpZ,EAEMuZ,WAAP,SAAkB9L,GACXjN,KAAKuY,UAAUO,IAAI7L,UACbsL,UAAL,OAAsBtL,QACjB+L,cAGZxZ,EAGMuO,UAAP,mBAAkCkL,EAAAza,UAAAC,OAAdC,MAAIC,MAAAsa,GAAAC,IAAAA,EAAAD,EAAAC,IAAJxa,EAAIwa,GAAA1a,UAAA0a,MACF,GAAfxa,EAAKD,OAAY,KACXka,EAAKja,iBACL6Z,UAAUzX,IAAI6X,QACdK,YACEL,QAGA,GAAK3Y,KAAKgZ,WAExBxZ,EAEM2Z,sBAAP,gBAESb,YAAYc,aAEZb,UAAUa,aACVR,YAAc,OACdI,UAAY,GACpBxZ,EAEM8T,YAAP,SAAmB+F,WACkBrK,EAAjCC,EAAAC,EAAiBlP,KAAKsY,eAAWtJ,EAAAC,KAAAG,MAAC,IAC3BiK,GADMrK,EAAAnE,MACa,OAAO,SAE1B,GACVrL,EAEMiU,UAAP,SAAiBxG,WACkB+H,EAA/BC,EAAA/F,EAAiBlP,KAAKuY,aAASvD,EAAAC,KAAA7F,MAAC,IACzBnC,GADM+H,EAAAnK,MACW,OAAO,SAExB,GAUXrL,EAIOoU,kBAAP,SAAyB0F,GAChBA,EAAOzE,KAAK,KAAM7U,KAAK8X,oBACnBA,aAAawB,EAAOzE,KAAK,IAAM,QAC/BkD,2BAEJD,aAAawB,EAAOzE,KAAK,OACjCoD,GAzHgCpV,IAASpD,yBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,8BAGhB,IAAIoV,OAAanZ,EAAAhB,EAAAC,EAAAsB,uBAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,8BAGnB,IAAIoV,OAAalZ,EAAAjB,EAAAC,EAAAsB,yBAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,8BAIpB,KAAC7D,EAAAlB,EAAAC,EAAAsB,uBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,8BAGH,KADCC,EACA/E,KAAA+E,MA6GvBC,IAAAC;;;;mYC9HO7F,EAAsBC,EAAtBD,QAAsBC,EAAbC,uBAOhBF,EAAQ,YAAYG,CAAAwF,WAAA9E,YAKjB6S,EAAY7G,OAAW9L,SACnBA,EAAAF,EAAAS,kBAJJmU,aAAK1U,EACL4U,gBAII5U,EAAK0U,MAAQ5I,EAAK6I,iBAAiBsG,KAAI,SAACC,UAAkB,IAAIzQ,EAAKyQ,MACnElb,EAAK4U,SAAW9I,EAAK+I,oBAAoBoG,KAAI,SAACE,UAAoB,IAAIpR,EAAOoR,MAAanb,SAR7EiB,EAAA0R,EAAA7S,GAShB6S,GAR0BpO,KAASK,KASvCC,IAAAC;;wwBCjBO7F,GAAsBC,EAAtBD,QAASE,GAAaD,EAAbC,wBAMKC,EADrBH,GAAQ,aAAYI,EAKhBF,GAASic,GAAO7b,EAGhBJ,GAASic,GAAO3b,EAIhBN,GAASkc,GAAQ3b,EAGjBP,GAAS6F,GAAKyH,EAGdtN,GAASmc,GAAS5O,EAGlBvN,GAASic,GAAOzO,EAGhBxN,GAASic,GAAOvO,EAGhB1N,GAASic,GAAOrO,EAGhB5N,GAASic,GAAOpO,EAGhB7N,GAASoc,GAAOC,EAKhBrc,GAASoc,GAAOE,EAEhBtc,GAAS,CAAC4F,KAAM,CAACC,KAAO0W,EAExBvc,GAAS+Q,GAAOyL,EAIhBxc,GAASkc,GAAQO,EAGjBzc,GAASic,GAAOS,EAIhB1c,GAASic,GAAOU,EAGhB3c,GAASic,GAAOW,EAIhB5c,GAAS6F,GAAK5F,GA3DqBO,EAAAC,GA2DrBC,WAAAC,YAAA0I,YAAAxI,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,WAzDf4b,kBAAoB,IAAIC,EAAcvb,EAAAV,eAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,+BAAAY,EAAAD,EAAAX,IAAAU,EAAAV,gCAAAa,EAAAF,EAAAX,IAAAU,EAAAV,gBAAAc,EAAAH,EAAAX,IAAAU,EAAAV,iBAAAkN,EAAAvM,EAAAX,IAAAU,EAAAV,oBAAAmN,EAAAxM,EAAAX,IAAAU,EAAAV,kBAAAoN,EAAAzM,EAAAX,IAAAU,EAAAV,oBAAAqN,EAAA1M,EAAAX,IAAAU,EAAAV,cAAAsN,EAAA3M,EAAAX,IAAAU,EAAAV,sBAAAuN,EAAA5M,EAAAX,IAkCtCU,EAAAV,sBAAAkc,EAAAvb,EAAAX,IAAAU,EAAAV,0BAAAmc,GAAAxb,EAAAX,IAAAU,EAAAV,4BAAAoc,GAAAzb,EAAAX,IAQAU,EAAAV,iBAAAqc,GAAA1b,EAAAX,IAAAU,EAAAV,sBAAAsc,GAAA3b,EAAAX,IAOAU,EAAAV,oBAAAuc,GAAA5b,EAAAX,IAGAU,EAAAV,oBAAAwc,GAAA7b,EAAAX,IAIAU,EAAAV,mBAAAyc,GAAA9b,EAAAX,IAAAA,EAIO0c,gBAAkB,wBAAyB1c,EAE1C2c,4BAAoB3c,EAEpB4c,2BAKR5c,EAGQ6c,SAAW,GAAE7c,EACb8c,UAAY,IAAG9c,EACf+c,MAAQ,EAAC/c,EACTgd,4BAA6B,EAErChd,EAGOgL,kBAAmB,EAAKhL,EACvBid,eAAiB,kBAAiBjd,EAClCkd,eAAiB,SAAQld,EAzBlBiB,EAAAuH,EAAA1I,OAyBkBoB,EAAAsH,EAAArH,iBAAAD,EAIvBE,OAAV,eAAyB0R,YAEZ7H,YAAcvJ,KAAKI,KAAKqU,eAAe,gBACvCgH,aAAezb,KAAKuJ,YAAYkL,eAAe,gBAAgB5U,aAAa+Z,GAKrFlI,EAAUC,KAAK,uBAAyBnD,GAAQ,SAACoD,EAAK8J,GAC9C9J,EACAiB,QAAQf,MAAM,yBAA0BF,GAIxCR,EAAK8J,oBAAsBQ,MAGtClc,EAEDwB,MAAA,gBAIS2a,gBAAkB3b,KAAKI,KAAKqU,eAAe,mBAAmB5U,aAAa6Z,OAC1EkC,EAAgC,IAAIrB,EAC1CqB,EAA8B1a,OAASlB,KAAKI,KAC5Cwb,EAA8BC,UAAY,YAC1CD,EAA8BE,QAAU,oBACnCH,gBAAgBI,YAAYzR,KAAKsR,QAIjCI,gBAAkBhc,KAAKI,KAAKqU,eAAe,mBAAmB5U,aAAa6Z,OAC1EuC,EAAgC,IAAI1B,EAC1C0B,EAA8B/a,OAASlB,KAAKI,KAC5C6b,EAA8BJ,UAAY,YAC1CI,EAA8BH,QAAU,oBACnCE,gBAAgBD,YAAYzR,KAAK2R,QAKhCC,eAAkBlc,KAAKI,KAAKqU,eAAe,mBAG5C0H,aAAenc,KAAKkc,eAAezH,eAAe,gBAAgB5U,aAAa8Z,QAC/EyC,kBAAoBpc,KAAKkc,eAAezH,eAAe,kBAAkB5U,aAAa6Z,OACrF2C,EAA+B,IAAI9B,EACzC8B,EAA6Bnb,OAASlB,KAAKI,KAC3Cic,EAA6BR,UAAY,YACzCQ,EAA6BP,QAAU,uBAClCM,kBAAkBL,YAAYzR,KAAK+R,OAIlCC,EAA2B,IAAI/B,OAEhCgC,WAAavc,KAAKkc,eAAezH,eAAe,cAAc5U,aAAa6Z,GAChF4C,EAAyBpb,OAASlB,KAAKI,KACvCkc,EAAyBT,UAAY,YACrCS,EAAyBR,QAAU,qBAE9BS,WAAWR,YAAYzR,KAAKgS,QAe5BrV,kBAAqBjH,KAAKI,KAAKqU,eAAe,eAAe5U,aAAaga,QAC1E5S,kBAAkB7G,KAAK4G,QAAS,MAI/BwV,EAAqB,IAAIjC,OAG1BkC,UAAYzc,KAAKkc,eAAezH,eAAe,iBAAiB5U,aAAa6Z,QAC7E3S,kBAAoB/G,KAAKyc,UAAUrc,KAAKqU,eAAe,qBAAqB5U,aAAaga,QACzF9S,kBAAkB3G,KAAK4G,QAAS,OAMhCyV,UAAUrc,KAAKiE,GAAGf,EAAKiB,UAAUmY,YAAa1c,KAAK2c,gBAAgBC,KAAK5c,KAAMwc,GAAoBxc,WAElGyc,UAAUrc,KAAKiE,GAAGf,EAAKiB,UAAUsY,YAAa7c,KAAK8c,sBAAsB9c,WAGzE+G,kBAAkB3G,KAAKiE,GAAGf,EAAKiB,UAAUK,WAAY5E,KAAK+c,8BAA+B/c,WAMzF+G,kBAAkB3G,KAAKiE,GAAGf,EAAKiB,UAAUsY,YAAY7c,KAAKgd,8BAA+Bhd,OAuBlGR,EAIQyd,aAAR,SAAqBhY,QACZiX,eAAelV,QAAS,OACxBgV,gBAAgB5b,KAAK4G,QAAS,OAC9B2U,gBAAgBvb,KAAK4G,QAAS,GAIvCxH,EAIQ0d,aAAR,SAAqBjY,QACZiX,eAAelV,QAAS,OACxB2U,gBAAgBvb,KAAK4G,QAAS,OAC9BgV,gBAAgB5b,KAAK4G,QAAS,GAIvCxH,EAIO2d,gBAAP,SAAuBlY,GACnB4N,QAAQC,IAAI,oBACRsK,EAAUpd,KAAKmc,aAAakB,OAChCtN,EAAYC,KAAKhQ,KAAKgb,gBAAiB,CAAEsC,KAAMF,IAAWzK,MAAK,SAACC,GAE5DC,QAAQC,IAAI,OAAQF,GACpBzQ,EAAQC,WAAWK,cAAc0G,cACjChH,EAAQC,WAAWsN,WAAWI,cAAc8C,MAJhD7C,OAMS,SAAC+B,GAENe,QAAQf,MAAMA,WAEbqK,aAAakB,OAAS,IAI9B7d,EAEM+d,cAAP,SAAqBtY,GAEjB9C,EAAQC,WAAWK,cAAcuC,eAwBrCxF,EAIOge,aAAP,SAAoBvY,MAIoC,MAAjD9C,EAAQC,WAAWC,cAAcO,cAAyE,MAAjDT,EAAQC,WAAWoG,YAAYQ,eAAuB,KAE1GV,EAAcnG,EAAQC,WAAWC,cAAckG,iBAAiBpG,EAAQC,WAAWC,cAAcO,cACrGT,EAAQC,WAAWoG,YAAYC,0BAA0BtG,EAAQC,WAAWC,cAAcO,aAAc0F,QAEnD,MAAjDnG,EAAQC,WAAWC,cAAcO,cAAwBT,EAAQC,WAAWoG,YAAYQ,oBAO3F/B,kBAAkB7G,KAAK4G,QAAS,GAGzCxH,EAKOie,aAAP,SAAoBxY,EAAayY,OACzBC,EAAoBD,EAAcpL,MAAM,UAEvCvL,kBAAkB3G,KAAK4G,QAAS,OAChCC,kBAAkB7G,KAAK4G,QAAS,EAErC7E,EAAQC,WAAWC,cAAc0M,oBAEjC5M,EAAQC,WAAWoG,YAAYuG,oBAE/B5M,EAAQC,WAAWoH,cAAc6K,oBACjClS,EAAQC,WAAWoH,cAAcsL,kBAAkB6I,GAEnDxb,EAAQC,WAAWoH,cAAcuN,sBACjC5U,EAAQC,WAAWoH,cAAc2L,kBAIrC3V,EAIQud,8BAAR,SAAsC9X,QAE7BqW,4BAA6B,GAItC9b,EAIQwd,8BAAR,SAAsC/X,QAE7BqW,4BAA6B,OAE7BvU,kBAAkB3G,KAAK4G,QAAS,GAEzCxH,EAIOwO,YAAP,SAAmB4P,QACVrU,YAAYvC,QAAS,EACtBhH,KAAKsJ,wBACAA,kBAAmB,OACnBC,YAAYvC,QAAS,QAGzByU,aAAa4B,OAASrd,KAAKub,eAAeqC,EAAK5d,KAAKwb,gBAG7Dhc,EAIOyO,YAAP,SAAmB2P,QAEVnC,aAAa4B,QAAUrd,KAAKub,eAAeqC,EAAK5d,KAAKwb,gBAG9Dhc,EAGOqe,cAAP,gBACSpC,aAAa4B,OAAS,IAI/B7d,EAGOsP,uBAAP,gBACS2M,aAAa4B,OAAS,QACtB9T,YAAYvC,QAAS,GAG9BxH,EAGQmd,gBAAR,uBAGamB,uBAMgB,GADPnf,MAAMof,KAAK5b,EAAQC,WAAWC,cAAckS,cAC/C9V,OAAa,WAMpBuf,EAAe9S,OAAO+S,KAAK9b,EAAQC,WAAW0L,gBAAgBgK,cAC9DoG,EAAcF,EAAavf,YAE1BsI,kBAAkBlH,aAAase,GAAaC,eAAepe,KAAKob,UAAY8C,EAAele,KAAKmb,eAChGkD,sBAAwB,IAAI1f,MAAYuf,OAOrC,IAAI1T,EAAI,EAAGA,EAAIwT,EAAavf,OAAQ+L,IAAI,KAClC8T,EAAc3P,EAAY3O,KAAKue,yBAErCD,EAAYzP,UAAU7O,KAAK+G,kBAAkB3G,MAC7Cke,EAAYE,YAAY,EAAGhU,EAAIxK,KAAKmb,SAAU,GAC9CmD,EAAY7J,eAAe,SAAS5U,aAAa4e,GAAOpB,OAASW,EAAaxT,OAExEkU,EAAwB,IAAInE,EAClCmE,EAAsBxd,OAASlB,KAAKI,KACpCse,EAAsB7C,UAAY,YAClC6C,EAAsB5C,QAAU,eAEhC4C,EAAsBC,gBAAkB3e,KAAK4e,0BAA0BZ,EAAaxT,IAAIqU,KAAK,KAG7FP,EAAYze,aAAa6Z,GAAQqC,YAAYzR,KAAKoU,IAM/D,MAAM5M,GACLe,QAAQC,IAAIhB,QAEP/K,kBAAkB3G,KAAK4G,QAAS,GAIzCxH,EAKQof,0BAAR,SAAkCE,OAC1Bd,EAAe,IAAIrf,MACnBogB,EAAM5c,EAAQC,WAAW0L,gBAAgBgK,aACzCkH,EAAM9T,OAAO+S,KAAK9b,EAAQC,WAAW0L,gBAAgBgK,cAEzDkG,EAAa1T,KAAKwU,OACd,IAAItU,EAAI,EAAGA,EAAIwU,EAAIvgB,OAAQ+L,OACxBwU,EAAIxU,IAAMsU,MACR,IAAIG,EAAI,EAAGA,EAAID,EAAIvgB,OAAS,EAAGwgB,IACnC,KACSC,EAAOF,EAAIxU,GACX2U,EAAOH,EAAIC,MACdF,EAAIG,GAAQH,EAAII,GAAM,KAAAC,EACF,CAACJ,EAAIC,GAAGD,EAAIxU,IAA9BwU,EAAIxU,GAAE4U,KAAEJ,EAAIC,GAAEG,cAM3BC,IAAAC,EAAeN,EAAGK,EAAAC,EAAA7gB,OAAA4gB,IAAC,KAAX7K,EAAG8K,EAAAD,GACJ7K,GAAOsK,GACNd,EAAa1T,KAAKkK,UAInBwJ,GAIXxe,EAOQ+f,qBAAR,SAA6Bnb,EAAOob,EAAStX,MAErCsX,EAAQ/gB,SAAW2F,EAAM3F,WAIxB,IAAI+L,EAAI,EAAGA,EAAIpG,EAAM3F,SAAU+L,EAE3BgV,EAAQC,SAASrb,EAAMoG,MACxBgV,EAAQlV,KAAKlG,EAAMoG,SACd+U,qBAAqBnb,EAAOob,EAAStX,GAC1CsX,EAAQpc,YARZ8E,EAAOoC,KAAKkV,EAAQE,UAa5BlgB,EAGQsd,sBAAR,SAA8B7X,OAAiBwN,OAGvCzS,KAAKqb,OACLsE,aAAa3f,KAAKqb,YAKjBA,MAAQuE,YAAW,WACfnN,EAAK6I,6BAEN7I,EAAK1L,kBAAkB3G,KAAK4G,QAAS,KAE1C,KAUPxH,EAEQse,qBAAR,mBACSxC,4BAA6B,EACS,MAAxCtb,KAAK+G,kBAAkB3G,KAAK+O,iBACsBH,EAArDC,EAAAC,EAAiBlP,KAAK+G,kBAAkB3G,KAAK+O,YAAQH,EAAAC,KAAAG,MAAC,KAA9CyQ,EAAK7Q,EAAAnE,WACJwT,sBAAwB,IAAI1f,MACjCkhB,EAAMC,YAKdtgB,EAIOugB,iBAAP,SAAwBzG,KAIvBxS,GAxiB0BjE,IAASpD,wBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAAA/D,EAAAhB,EAAAC,EAAAsB,wCAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,yCAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,mBAAA7D,EAAAlB,EAAAC,EAAAsB,yBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,mBAAAuI,EAAAtN,EAAAC,EAAAsB,0BAAAsL,IAAAjI,gBAAAC,cAAAC,YAAAC,mBAAAwI,EAAAvN,EAAAC,EAAAsB,6BAAAuL,IAAAlI,gBAAAC,cAAAC,YAAAC,mBAAAyI,EAAAxN,EAAAC,EAAAsB,2BAAAwL,IAAAnI,gBAAAC,cAAAC,YAAAC,mBAAA0I,EAAAzN,EAAAC,EAAAsB,6BAAA0L,IAAArI,gBAAAC,cAAAC,YAAAC,mBAAA2I,EAAA1N,EAAAC,EAAAsB,uBAAA4L,IAAAvI,gBAAAC,cAAAC,YAAAC,mBAAA4I,EAAA3N,EAAAC,EAAAsB,+BAAA6L,IAAAxI,gBAAAC,cAAAC,YAAAC,mBAAAuX,EAAAtc,EAAAC,EAAAsB,+BAAAqa,IAAAhX,gBAAAC,cAAAC,YAAAC,mBAAAwX,GAAAvc,EAAAC,EAAAsB,mCAAAsa,IAAAjX,gBAAAC,cAAAC,YAAAC,mBAAAyX,GAAAxc,EAAAC,EAAAsB,qCAAAua,IAAAlX,gBAAAC,cAAAC,YAAAC,mBAAA0X,GAAAzc,EAAAC,EAAAsB,0BAAAwa,IAAAnX,gBAAAC,cAAAC,YAAAC,mBAAA2X,GAAA1c,EAAAC,EAAAsB,+BAAAya,IAAApX,gBAAAC,cAAAC,YAAAC,mBAAA4X,GAAA3c,EAAAC,EAAAsB,6BAAA0a,IAAArX,gBAAAC,cAAAC,YAAAC,mBAAA6X,GAAA5c,EAAAC,EAAAsB,6BAAA2a,IAAAtX,gBAAAC,cAAAC,YAAAC,mBAAA8X,GAAA7c,EAAAC,EAAAsB,4BAAA4a,IAAAvX,gBAAAC,cAAAC,YAAAC,mBA2DrBC,EA3DqB/E,KAAA+E,MA0iBvCC,IAAAC;;gpBC9iBO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,qBAGEC,EADlBH,EAAQ,UAASI,EAGbF,EAASqN,GAASjN,EAElBJ,EAAS,CAACqN,IAAU/M,EAEpBN,EAASyN,QAAOlN,EAEhBP,EAASqN,GAASC,EAGlBtN,EAASuiB,QAAOhV,EAGhBvN,EAAS8N,SAAQN,EAGjBxN,EAAS,CAAC4F,KAAK,CAAC0F,KAAOoC,EAGvB1N,EAASghB,GAAMpT,EAGf5N,EAASwiB,GAAU3U,EAanB7N,EAAS2N,GAAU1N,GApCaO,EAAAC,GAoCbC,WAAAC,YAAAiK,YAAA/J,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,UAAAM,EAAAV,QAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,SAAAY,EAAAD,EAAAX,IAAAU,EAAAV,eAAAa,EAAAF,EAAAX,IAAAU,EAAAV,SAAAc,EAAAH,EAAAX,IAAAU,EAAAV,WAAAkN,EAAAvM,EAAAX,IAAAU,EAAAV,eAAAmN,EAAAxM,EAAAX,IAAAU,EAAAV,qBAAAoN,EAAAzM,EAAAX,IAAAU,EAAAV,YAAAqN,EAAA1M,EAAAX,IAAAU,EAAAV,cAAAsN,EAAA3M,EAAAX,IALpBU,EAAAV,iBAAAuN,EAAA5M,EAAAX,IAAAA,EAKoBiB,EAAA8I,EAAAjK,OALpBoB,EAAA6I,EAAA5I,iBAPwBD,EAGdE,OAAV,gBACSwgB,QAAUlgB,KAAKI,KAAKqU,eAAe,MAAM5U,aAAa4e,IAc/Djf,EAIOkO,aAAP,SAAoBC,OAQX,IAAI/C,IANM,IAAZ5K,KAAKuT,KACJpR,EAAQC,WAAW0L,gBAAgB+K,aAAa7Y,KAAKuT,KAKzC5F,EACR3N,KAAK4N,eAAehD,UACfA,GAAO+C,EAAU/C,IAG9BzI,EAAQC,WAAW0L,gBAAgB0K,YAAYxY,KAAKuT,aAC5BvE,EAAxBC,EAAAC,EAAelP,KAAK6U,QAAI7F,EAAAC,KAAAG,MAAC,KAAjBoF,EAAGxF,EAAAnE,MACP1I,EAAQC,WAAWC,cAAc8d,OAAO3L,QAIvC0L,QAAQ7C,OAASrd,KAAKuT,KAI9B/T,EAEM2M,iBAAP,SAAwBiU,QACfhgB,KAAK+L,iBAAiBiU,EAAMvf,gBAIrCrB,EAIO6gB,YAAP,gBAES9M,IAAMpR,EAAQC,WAAW0L,gBAAgB0K,eAGjDhZ,EAGMmN,YAAP,kBAEW3M,KAAKuT,KACf/T,EAEMgO,wBAAP,eACQC,EAAkBzN,KAAKH,aAAawN,GAAcC,YAAYtN,KAAKsgB,mBAClEzgB,aAAawN,GAAcE,YAAYE,EAAiB,IAChEjO,EAEM8X,gBAAP,SAAuBiJ,QACdD,aAAeC,GAGxB/gB,EAIO+X,eAAP,SAAsBiJ,OAEdC,EAAczgB,KAAKH,aAAawN,GAAcC,YAAYkT,QACzD3gB,aAAawN,GAAcE,YAAYkT,EAAa,OAGnDC,EAAS1gB,KAAKH,aAAawN,GAAcC,YAAY,GAAGoT,OAAO,GAC/DC,EAAeD,EAAOE,WAAWF,EAAOG,UAAU,UAAU,IAAIC,EAAK,EAAG,EAAE,EAAE,IAE5EC,EAAQ,IAAIC,EAAuB,IAAjBL,EAAanb,EAAyB,IAAhBmb,EAAalb,EAAwB,IAAhBkb,EAAajb,EAAyB,IAAjBib,EAAaM,QAChGf,QAAQa,MAAQA,GAExBvhB,EAEM0hB,gBAAP,kBACWlhB,KAAKsgB,cAGhB9gB,EAGOsJ,kBAAP,WAII3G,EAAQC,WAAW0E,UAAUyC,YAAYvC,QAAS,EAClD7E,EAAQC,WAAW0E,UAAUkH,YAAY,cAAchO,KAAKuT,KAC5DpR,EAAQC,WAAW0E,UAAUmH,YAAY,OAAOjO,KAAK6U,WAEhD3G,gBAAgBlO,KAAKmO,WAAW,eAExC3O,EAEMuN,oBAAP,SAA2BqG,QAElB0C,iBAAiBxL,KAAK8I,GAC3BjR,EAAQC,WAAWC,cAAcyK,cAAc9M,KAAKuT,KAAKjJ,KAAK8I,EAAKlG,cACtE1N,EAEO0O,gBAAR,SAAwBG,EAAKC,OACpB,IAAI1D,cADgB0D,IAAAA,EAAY,IACrBD,EAAK,KACfE,EAASD,EAAeA,MAAa1D,EAAQA,EACzB,iBAAbyD,EAAIzD,IAAkC,OAAbyD,EAAIzD,QACjCsD,gBAAgBG,EAAIzD,GAAM2D,GAE3BpM,EAAQC,WAAW0E,UAAUmH,YAAYrD,EAAI,KAAKyD,EAAIzD,MAGlEpL,EAEMmU,qBAAP,gBACMwN,UAER9Y,GA/J2BxF,IAASpD,iBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,6BAGZ,MAAE/D,EAAAhB,EAAAC,EAAAsB,kBAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,wBAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,8BAIM,IAAIiI,UAAM9L,EAAAlB,EAAAC,EAAAsB,kBAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,6BAElB,YAAQuI,EAAAtN,EAAAC,EAAAsB,oBAAAsL,IAAAjI,gBAAAC,cAAAC,YAAAC,8BAGN,KAACwI,EAAAvN,EAAAC,EAAAsB,wBAAAuL,IAAAlI,gBAAAC,cAAAC,YAAAC,8BAGJ,KAAKyI,EAAAxN,EAAAC,EAAAsB,8BAAAwL,IAAAnI,gBAAAC,cAAAC,YAAAC,6BAGQ,MAAE0I,EAAAzN,EAAAC,EAAAsB,qBAAA0L,IAAArI,gBAAAC,cAAAC,YAAAC,8BAGlB,QAAI2I,EAAA1N,EAAAC,EAAAsB,uBAAA4L,IAAAvI,gBAAAC,cAAAC,YAAAC,mBAAA4I,EAAA3N,EAAAC,EAAAsB,0BAAA6L,IAAAxI,gBAAAC,cAAAC,YAAAC,8BAgBC,KADFC,EACG/E,KAAA+E,MA4H1BC,IAAAC;;0nBCnKO7F,EAAsBC,EAAtBD,QAASE,EAAaD,EAAbC,4BAGSC,EADzBH,EAAQ,iBAAgBI,EASpBF,EAAS6F,GAAKzF,EAGdJ,EAAS6F,GAAKvF,EAGdN,EAAS6F,GAAKtF,EAGdP,EAAS,CAAE4F,KAAMmL,IAAS9Q,GAjBaO,EAAAC,GAiBbC,WAAAC,YAAA4Z,YAAA1Z,EAAAC,EAAAC,UAAAC,OAAAC,MAAAC,MAAAJ,GAAAK,IAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,UAAAN,EAAAF,EAAAS,KAAAC,MAAAV,SAAAW,OAAAL,WAf3B0B,YAEA9B,EAEA8iB,iBAA0B,EAAKpiB,EAAAV,aAAAL,EAAAgB,EAAAX,IAAAU,EAAAV,uBAAAY,EAAAD,EAAAX,IAAAU,EAAAV,iBAAAa,EAAAF,EAAAX,IAAAU,EAAAV,iBAAAc,EAAAH,EAAAX,IAAAU,EAAAV,iBAAAkN,EAAAvM,EAAAX,IAiB/BA,EAGOwO,cAAuC,GAAExO,EAExC+iB,oBAAsB,EAE9B/iB,EAGOiW,aAA4B,IAAI8D,IAAa/Z,EAhBzBiB,EAAAyY,EAAA5Z,OAgByBoB,EAAAwY,EAAAvY,iBAAAD,EAK1CE,OAAV,gBACS4C,SAAYtC,KAAKI,KAAKqU,eAAe,8BACrC6M,aAAe,QACf/M,aAAe,IAAI8D,KAE3B7Y,EAESwB,MAAV,aAKAxB,EAIOqU,gBAAP,eACUyF,EAAS3K,EAAY3O,KAAKuhB,cAChCjI,EAAOzK,UAAU1M,EAAQC,WAAWC,cAAcC,UAClDgX,EAAOzZ,aAAawI,GAAQgY,kBACxBmB,EAAuBrN,KAAKsN,MAAMtN,KAAKuN,SAAY1hB,KAAKqhB,qBAAwB,EAS9Enf,EAJkB,IAAIpE,EAAKqW,KAAKuN,SAAW,GAAKvN,KAAKuN,SAAW,GAAKvN,KAAKuN,SAAW,IAAKxhB,YAC3DD,QAAQS,eAAeV,KAAKshB,cAGnCxgB,IAAIqB,EAAQC,WAAWC,cAAcM,mBAAmB9B,sBACtFyY,EAAOzY,cAAgBqB,OAGlB4K,cAAcwM,EAAOzZ,aAAawI,GAAQsE,eAAiB,GAChE2M,EAAOzZ,aAAawI,GAAQiP,gBAAgBkK,GAC5ClI,EAAOzZ,aAAawI,GAAQkP,eAAeiK,GAGpClI,GAIX9Z,EAKO+I,iBAAP,SAAwBnI,OACdkZ,EAAS3K,EAAY3O,KAAKuhB,cAEhCjI,EAAOzZ,aAAawI,GAAQgY,kBAExBmB,EAAuBrN,KAAKsN,MAAMtN,KAAKuN,SAAY1hB,KAAKqhB,qBAAwB,EAY9Enf,EAJkB,IAAIpE,EAAKqW,KAAKuN,SAAW,GAAKvN,KAAKuN,SAAW,GAAKvN,KAAKuN,SAAW,IAAKxhB,YAC3DD,QAAQS,eAAeV,KAAKshB,cAGnCxgB,IAAIV,EAAKS,sBACvCyY,EAAOzY,cAAgBqB,EAEvBoX,EAAOzK,UAAU1M,EAAQC,WAAWC,cAAcC,eAC7CwK,cAAcwM,EAAOzZ,aAAawI,GAAQsE,eAAiB,GAEhE2M,EAAOzZ,aAAawI,GAAQiP,gBAAgBkK,GAC5ClI,EAAOzZ,aAAawI,GAAQkP,eAAeiK,GAIpClI,GAGX9Z,EAKOqJ,6BAAP,SAAoC8Y,QAC3B/e,aAAe+e,MAEhBvU,EAAgBpN,KAAK4C,aAAa/C,aAAawI,GAAQxI,aAAawN,GAAcC,YAAY,QAC7F1K,aAAa/C,aAAawI,GAAQxI,aAAawN,GAAcE,YAAYH,EAAe,IAChG5N,EAEMoJ,0BAAP,WAEQ5I,KAAK4C,oBACJA,aAAa/C,aAAawI,GAAQmF,+BAClC5K,aAAe,KACpBT,EAAQC,WAAW0E,UAAUgI,2BAIjCtP,EAKOkU,mBAAP,SAA0B2F,WACiBrK,EAAvCC,EAAAC,EAAiBlP,KAAKsC,SAAS6M,YAAQH,EAAAC,KAAAG,MAAC,KAAhCyQ,EAAK7Q,EAAAnE,SACNgV,EAAMhgB,aAAawI,GAAQkL,KAAO8F,EAAU,OAAOwG,SAEnD,MAGXrgB,EAIO2gB,OAAP,SAAc9c,GAENrD,KAAKuU,aAAauE,IAAIzV,SACjBkR,aAAazT,IAAIuC,IAE7B7D,EAEMuP,kBAAP,gBAES6S,sBAAsB5hB,KAAKsC,WAcnC9C,EAEOoiB,sBAAR,SAA8BxhB,MAEM,MAA7BA,EAAKP,aAAawI,KACjBjI,EAAKP,aAAawI,GAAQgH,YAAa,GAEvB,MAAjBjP,EAAK+O,iBACsB6F,EAA9BC,EAAA/F,EAAiB9O,EAAK+O,YAAQ6F,EAAAC,KAAA7F,MAAC,KAAvByQ,EAAK7K,EAAAnK,WACJ+W,sBAAsB/B,KAMnCrgB,EAGO4J,mBAAP,gBAES9G,SAAS6M,SAAS0S,SAAQ,SAAChC,GAC5BA,EAAMC,kBAELxd,SAASgN,oBAKdnN,EAAQC,WAAW0L,gBAAgBqL,6BAC9B7W,SAASJ,SAAW,IAAIpE,EAAK,EAAG,EAAG,QACnCwE,SAASC,SAAYf,EAAKgB,SAAS,IAAIhB,QACvCmB,mBAAqB3C,KAAKsC,cAC1BsG,6BAGTpJ,EAGOkK,uBAAP,eACU4P,EAAS3K,EAAY3O,KAAKuhB,cAIhCjI,EAAOzZ,aAAawI,GAAQgY,cAC5B/G,EAAOzY,cAAgB,IAAI/C,EAAK,EAAE,EAAE,GACpCwb,EAAOzK,UAAU7O,KAAKsC,eAEjBK,mBAAsB2W,GAQ9BtB,GAvO8BnV,IAASpD,sBAAA9B,IAAAmF,gBAAAC,cAAAC,YAAAC,mBAAA/D,EAAAhB,EAAAC,EAAAsB,gCAAA5B,IAAAiF,gBAAAC,cAAAC,YAAAC,mBAAA9D,EAAAjB,EAAAC,EAAAsB,0BAAA1B,IAAA+E,gBAAAC,cAAAC,YAAAC,8BAepB,QAAI7D,EAAAlB,EAAAC,EAAAsB,0BAAAzB,IAAA8E,gBAAAC,cAAAC,YAAAC,8BAGM,QAAIuI,EAAAtN,EAAAC,EAAAsB,0BAEjChC,IAAQqF,gBAAAC,cAAAC,YAAAC,mBAHkBC,EAGlB/E,KAAA+E,MAwNZC,IAAAC","file":"all.js","sourcesContent":["import { _decorator, Camera, Component, find, input, Node, Vec3, tween, Scheduler,Quat, misc} from 'cc';\r\nimport { Manager } from './Manager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CameraController')\r\nexport class CameraController extends Component {\r\n    // @property(Node)\r\n    // centralNode:Node = find(\"Manager/VertexManager/Vertex\");\r\n    @property(Camera)\r\n    mainCamera:Camera;\r\n    @property(Vec3)\r\n    originalOffset:Vec3;\r\n    @property(Vec3)\r\n    currentOffset:Vec3;\r\n    @property(Camera)\r\n    public camera: Camera;\r\n\r\n    private smoothZoomIntervals = 0.42;\r\n    private originalOffsetFactor:number;\r\n\r\n    onLoad() {\r\n        \r\n        this.camera = find(\"Main Camera\").getComponent(Camera);\r\n        this.originalOffset = new Vec3(0,0,2);\r\n        this.camera.near = 0.01;\r\n        this.originalOffsetFactor = this.originalOffset.length() / this.originalOffset.clone().normalize().length();\r\n        //console.log(\"camera offset factor:\",this.originalOffsetFactor);\r\n\r\n    }\r\n\r\n\r\n    focusOn(node: Node) {\r\n        this.recordCurrentOffset();\r\n        let targetPosition = node.getWorldPosition();\r\n        let targetOffset = this.currentOffset.clone().normalize().multiplyScalar(this.originalOffsetFactor);\r\n\r\n    \r\n        tween(this.camera.node)\r\n            .to(this.smoothZoomIntervals, { \r\n                worldPosition: targetPosition.clone().add(targetOffset),\r\n            }\r\n                , { easing: 'smooth' })\r\n            .start();\r\n        \r\n\r\n        \r\n\r\n    }\r\n\r\n    rotateOnVertex(target: Vec3, center: Vec3, angle: number, axis: Vec3 = Vec3.UP): Vec3{\r\n        let rotateQuat = new Quat();\r\n        let dir = new Vec3();\r\n        let rotated = new Vec3();\r\n        Vec3.subtract(dir, target, center);\r\n        let rad = misc.degreesToRadians(angle);\r\n        Quat.fromAxisAngle(rotateQuat, axis, rad);\r\n        Vec3.transformQuat(rotated, dir, rotateQuat);\r\n        Vec3.add(rotated, center, rotated);\r\n        return rotated;\r\n    }\r\n\r\n    resetPosition(){\r\n        \r\n        this.camera.node.position = Manager.Instance().vertexManager.rootNode.position.clone().add(this.originalOffset);\r\n        this.camera.node.rotation =  Quat.identity(new Quat());\r\n    }\r\n\r\n    /**\r\n     * record the offset between tmp central node(current central node)\r\n     */\r\n    public recordCurrentOffset(){\r\n        // this.currentOffset = this.camera.node.getWorldPosition().clone().subtract(Manager.Instance().vertexManager.currentCentralNode.getWorldPosition());\r\n        this.currentOffset = Manager.Instance().canvasManager.cameraRotateOffset.clone().subtract(Manager.Instance().vertexManager.currentCentralNode.getWorldPosition());\r\n        Manager.Instance().vertexManager.currentCentralNode = Manager.Instance().vertexManager.chosenVertex;\r\n    }\r\n\r\n\r\n\r\n}\r\n","import {  _decorator, Component, input,Input,EventMouse,  geometry, Node, director, tween, PhysicsSystem, Vec3,Vec2, Camera,math, find, Quat } from 'cc';\r\nimport { Vertex } from './Vertex';\r\nimport { Manager } from './Manager';\r\nimport { Edge } from './Edge';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('CanvasManager')\r\nexport class CanvasManager extends Component {\r\n\r\n\r\n    @property({ type:Node})\r\n    public centralVertex:Node = null;\r\n    \r\n    // mouse-left parameter\r\n\r\n    public leftClickCount: number = 0; \r\n    private lastClickTime: number = 0;\r\n    private doubleClickDelay: number = 0.3; // double-click intervals of mouse-left\r\n\r\n\r\n    // mouse wheel parameter\r\n    private _zoomSpeed: number = 0.00009; // zoom speed of mouse wheel\r\n\r\n    // mouse movement\r\n\r\n    // private isMouseDragging = false;\r\n    private cameraMove = false;\r\n    private cameraRotateAroundVertex = false;\r\n    public cameraRotateOffset: Vec3 = new Vec3(); // the offset on rotating(tranform from Quat to Vec3)\r\n    private previousMousePosition: Vec2 = null;\r\n    private previousMousePositionVec3: Vec3 = new Vec3();\r\n    private dragMoveSpeed = 0.01;\r\n    private dragRotateSpeed = 0.2;\r\n    private dragRotationQuat: Quat = new Quat();\r\n    private dragRotateEuler: Vec3 = new Vec3(); \r\n\r\n    onLoad() {\r\n        \r\n        //Manager.Instance().cameraController = Manager.Instance().cameraController.getComponent(CameraController);\r\n        //this.vertexManager = this.vertexManager.getComponent(VertexManager);\r\n        //this.vertexManager.createVertexAround(this.node); \r\n        \r\n\r\n\r\n        input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\r\n        input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\r\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);\r\n    }\r\n\r\n    protected start(): void {\r\n                // reset the canvas\r\n        this.resetCanvas();\r\n    }\r\n\r\n    onMouseMove(event:EventMouse){\r\n        if(this.cameraMove){\r\n            /**\r\n             * Method 1. start -- camera rotate by itseif\r\n             */\r\n            \r\n\r\n            // const currentPosition = event.getLocation();\r\n            // const dx = event.getDeltaX();\r\n            // const dy = event.getDeltaY();\r\n            // let quat = Manager.Instance().cameraController.camera.node.rotation.clone();\r\n            // let quatX = Quat.fromEuler(new Quat(), dy * this.dragMoveSpeed, 0, 0);\r\n            // let quatY = Quat.fromEuler(new Quat(), 0, dx * this.dragMoveSpeed, 0);\r\n            // Quat.multiply(quat, quat, quatX);\r\n            // Quat.multiply(quat, quat, quatY);\r\n            // Manager.Instance().cameraController.camera.node.rotation = quat;\r\n            /**\r\n             * Method 1. end -- camera rotate by itself\r\n             */\r\n\r\n            /**\r\n             * Method 2. start -- camera move directly\r\n             */\r\n            const dx = event.getDeltaX();\r\n            const dy = event.getDeltaY();\r\n            let newPosition = new Vec3(\r\n                Manager.Instance().cameraController.camera.node.position.x - dx * this.dragMoveSpeed,\r\n                Manager.Instance().cameraController.camera.node.position.y - dy * this.dragMoveSpeed,\r\n                Manager.Instance().cameraController.camera.node.position.z\r\n            );\r\n\r\n            Manager.Instance().cameraController.camera.node.position = newPosition;\r\n\r\n\r\n\r\n            /**\r\n             * Method 2. end -- camera move directly\r\n             */\r\n\r\n            \r\n        }\r\n\r\n        else if(this.cameraRotateAroundVertex){\r\n            /**\r\n             * ---- start rorate nodes and its children --------\r\n             */\r\n            // let currentMousePosition = event.getLocation();\r\n            // let dx = (currentMousePosition.x - this.previousMousePosition.x) * this.dragRotateSpeed;\r\n            // let dy = (currentMousePosition.y - this.previousMousePosition.y) * this.dragRotateSpeed;\r\n            \r\n            // console.log(\"central node:\",Manager.Instance().vertexManager)\r\n            // let cameraQuaternion =  Manager.Instance().vertexManager.centralNode.rotation.clone();\r\n            // let rotateQuat = new Quat();\r\n            // Quat.fromEuler(rotateQuat, dy, dx, 0);\r\n            // Quat.multiply(rotateQuat, cameraQuaternion, rotateQuat);\r\n\r\n            // Manager.Instance().vertexManager.centralNode.setRotation(rotateQuat);\r\n            // //console.log(\"rotation focus node:\", this.centralVertex.getComponent(Vertex).getVertexID(),\" position:\",this.centralVertex.position)\r\n            \r\n            // this.previousMousePosition = currentMousePosition;\r\n            /**\r\n             * ---- end rorate nodes and its children --------\r\n             */\r\n\r\n            /**\r\n             * ---- start rorate camera ------------\r\n             */\r\n            let currentMousePosition = event.getLocation();\r\n            let dx = (currentMousePosition.x - this.previousMousePosition.x) * this.dragRotateSpeed;\r\n            let dy = (currentMousePosition.y - this.previousMousePosition.y) * this.dragRotateSpeed;\r\n            const angleX = (dx / 100) * 80;\r\n            const angleY = (dy / 100) * 80;\r\n            const cameraPos = Manager.Instance().cameraController.camera.node.worldPosition.clone();\r\n            const targetPos = Manager.Instance().vertexManager.currentCentralNode.worldPosition.clone();\r\n\r\n            // calculate the position after rotation\r\n            const rotatedPosX = Manager.Instance().cameraController.rotateOnVertex(cameraPos, targetPos, angleX, Vec3.UP);\r\n            const rotatedPosY = Manager.Instance().cameraController.rotateOnVertex(rotatedPosX, targetPos, angleY, Vec3.RIGHT);\r\n\r\n            // set the camera\r\n            Manager.Instance().cameraController.camera.node.worldPosition = rotatedPosY;\r\n            this.cameraRotateOffset = rotatedPosY;\r\n            Manager.Instance().cameraController.camera.node.lookAt(targetPos);\r\n\r\n            // uodate the mouse position\r\n            this.previousMousePosition = currentMousePosition;\r\n\r\n            /**\r\n             * ---- end rorate camera ------------\r\n             */\r\n            \r\n           \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Event of pressing mouse down \r\n     * @param event \r\n     */\r\n    onMouseDown(event: EventMouse){\r\n        \r\n        /**\r\n         * mouse up by right key -- create vertex\r\n         */\r\n        if (event.getButton() === EventMouse.BUTTON_RIGHT) {\r\n\r\n            /**\r\n             * choose operation by click left button\r\n             */\r\n            // Manager.Instance().UIManager.dropDownBarLayout.node.setWorldPosition(event.getLocationX(), event.getLocationY(), 0);\r\n            // Manager.Instance().UIManager.dropDownBarLayout.node.active = true;\r\n            \r\n            this.chooseVertexOrEdgeAtMouse(event);\r\n            \r\n            //this.createVertexAtMouse(event);\r\n        } \r\n        /**\r\n         * press by middle key 存在bug：当按下中键拖动视角时，再双击鼠标选中某个节点为中心摄像机的角度会偏移\r\n         */\r\n        if(event.getButton() === EventMouse.BUTTON_MIDDLE){\r\n            \r\n            this.cameraMove = true;\r\n            this.previousMousePosition = event.getLocation();\r\n\r\n        }\r\n\r\n        /**\r\n         * press by left key\r\n         */\r\n        else if(event.getButton() === EventMouse.BUTTON_LEFT){\r\n            \r\n            this.chooseVertexOrEdgeAtMouse(event);\r\n            this.cameraRotateAroundVertex = true;\r\n            this.previousMousePositionVec3.set(event.getLocationX(), event.getLocationY(), 0);  \r\n            this.previousMousePosition = event.getLocation();\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Event of mouse up\r\n     * @param event \r\n     */\r\n    onMouseUp(event: EventMouse) {\r\n        // close the tagOrderList\r\n        Manager.Instance().UIManager.tagOrderChoiceBar.node.active = false;\r\n        /**\r\n         * mouse up by middle key\r\n         */\r\n        if (event.getButton() === EventMouse.BUTTON_MIDDLE) {\r\n           \r\n            this.cameraMove = false;\r\n            \r\n        }\r\n        /**\r\n         * mouse up by left key\r\n         */\r\n        else if(event.getButton() === EventMouse.BUTTON_LEFT){\r\n            if(Manager.Instance().UIManager.dropDownBarLayout.node.active = true) Manager.Instance().UIManager.dropDownBarLayout.node.active = false;\r\n            this.cameraRotateAroundVertex = false;\r\n            \r\n            \r\n           \r\n        }\r\n    }\r\n\r\n    /**\r\n     * mouse event of wheel, on camera zooming\r\n     * @param event \r\n     */\r\n    onMouseWheel(event: EventMouse) {\r\n        // get the y value of wheel \r\n        let scrollY = event.getScrollY();\r\n\r\n        // calculate and update new position of camera\r\n        let newCameraPos = new Vec3();        \r\n        math.Vec3.scaleAndAdd(newCameraPos, Manager.Instance().cameraController.camera.node.position, Manager.Instance().cameraController.camera.node.forward, this._zoomSpeed * scrollY);\r\n        Manager.Instance().cameraController.camera.node.position = newCameraPos;\r\n        \r\n    }\r\n\r\n\r\n\r\n    \r\n    onDestroy() {\r\n        input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);\r\n        input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n    }\r\n\r\n    /**\r\n     * do the collision detection by ray\r\n     * @param event \r\n     */\r\n    createVertexAtMouse(event: EventMouse) {\r\n        let ray = new geometry.Ray();\r\n        Manager.Instance().cameraController.camera.screenPointToRay(event.getLocationX(), event.getLocationY(), ray);\r\n        if (PhysicsSystem.instance.raycastClosest(ray)) {\r\n            \r\n            const result = PhysicsSystem.instance.raycastClosestResult;\r\n           \r\n            if (result.collider.node.getComponent(Vertex)) {\r\n                let childVertex = Manager.Instance().vertexManager.createNodeAround(result.collider.node);\r\n                Manager.Instance().edgeManager.createEdgeWithStartAndEnd(result.collider.node, childVertex);\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * when click and choose vertex\r\n     * @param event left click(0, 1, 2 times)\r\n     */\r\n    chooseVertexOrEdgeAtMouse(event:EventMouse){\r\n        \r\n        let ray = new geometry.Ray();\r\n        Manager.Instance().cameraController.camera.screenPointToRay(event.getLocationX(), event.getLocationY(), ray);\r\n        if (PhysicsSystem.instance.raycastClosest(ray)) {\r\n            \r\n            const result = PhysicsSystem.instance.raycastClosestResult;\r\n            /**\r\n             * if choose one vertex\r\n             */\r\n            if (result.collider.node.getComponent(Vertex)) {\r\n                Manager.Instance().edgeManager.returnFocusToNormalEdge();\r\n                \r\n                if(this.leftClickCount == 0){\r\n                    this.leftClickCount ++;\r\n                    this.centralVertex = result.collider.node;\r\n                    \r\n                \r\n                    // Manager.Instance().vertexManager.node.position = this.centralVertex.position;\r\n                    Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n                    Manager.Instance().vertexManager.chosenVertex = result.collider.node;\r\n                    Manager.Instance().vertexManager.chooseOneNormalVertexToFocus(result.collider.node); // change the chosen vertex\r\n                    \r\n                }  \r\n                /**\r\n                 * mouse click twice \r\n                 * camera focus on one vertex\r\n                 */\r\n                else if(this.leftClickCount == 1 && Manager.Instance().vertexManager.chosenVertex == result.collider.node) {\r\n                    \r\n                    Manager.Instance().cameraController.focusOn(result.collider.node);\r\n\r\n                    //Manager.Instance().vertexManager.currentCentralNode.getComponent(Vertex).showVertexDetails();\r\n\r\n                    this.leftClickCount = 0;\r\n                }\r\n                else if(this.leftClickCount == 1 && Manager.Instance().vertexManager.chosenVertex != result.collider.node){\r\n                    this.centralVertex = result.collider.node;\r\n                    Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n                    Manager.Instance().vertexManager.chosenVertex = result.collider.node;\r\n                    Manager.Instance().vertexManager.chooseOneNormalVertexToFocus(result.collider.node);\r\n                }  \r\n                else{\r\n                    this.leftClickCount = 0;\r\n                    Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n                }\r\n                result.collider.node.getComponent(Vertex).showVertexDetails();\r\n            }\r\n            else if(result.collider.node.getComponent(Edge)){\r\n                Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n                Manager.Instance().edgeManager.returnFocusToNormalEdge();\r\n                Manager.Instance().edgeManager.chosenEdgeNode = result.collider.node;\r\n                Manager.Instance().edgeManager.chooseNormalEdge(result.collider.node); \r\n                Manager.Instance().edgeManager.chosenEdgeNode.getComponent(Edge).showEdgeDetails();\r\n            }\r\n        }\r\n        \r\n        else{\r\n            this.leftClickCount = 0;\r\n            Manager.Instance().edgeManager.returnFocusToNormalEdge();\r\n            // Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n        } \r\n    }\r\n\r\n    /**\r\n     * clean the canvas\r\n     */\r\n    cleanCanvas(){\r\n        // clean vertices\r\n        Manager.Instance().vertexManager.destroyAllChildren();\r\n        Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n        // clean edges\r\n        Manager.Instance().edgeManager.destroyAllEdges();\r\n        Manager.Instance().edgeManager.returnFocusToNormalEdge();\r\n        //reset camera\r\n        Manager.Instance().cameraController.resetPosition();\r\n        // clean UI\r\n        Manager.Instance().UIManager.isNodeInfoEnable = false;\r\n        Manager.Instance().UIManager.nodeInfoBar.active = false;\r\n        // clear Layout\r\n        Manager.Instance().layoutManager.clearTags()\r\n    }\r\n\r\n\r\n    /**\r\n     * clean the canvas and new a central node in Vec3(0,0,0)\r\n     */\r\n    resetCanvas(){\r\n        // reset vertices\r\n        Manager.Instance().vertexManager.destroyAllChildren();\r\n        Manager.Instance().vertexManager.initiateOriginalVertex();\r\n        Manager.Instance().vertexManager.returnFocusToNormalVertex();\r\n        // reset edges\r\n        Manager.Instance().edgeManager.destroyAllEdges();\r\n        Manager.Instance().edgeManager.returnFocusToNormalEdge();\r\n        // reset camera\r\n        Manager.Instance().cameraController.resetPosition();\r\n        // reset UI\r\n        Manager.Instance().UIManager.isNodeInfoEnable = false;\r\n        Manager.Instance().UIManager.nodeInfoBar.active = false;\r\n        // clear Layout\r\n        Manager.Instance().layoutManager.clearTags()\r\n        \r\n        \r\n    }\r\n\r\n    \r\n}\r\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Constant')\nexport class Constant extends Component {\n\n}\n\nexport const PHY_GROUP = {\n    DEFAULT: 1 << 0,\n    MOUSE: 1 << 1,\n    EDGE: 1 << 2,\n    VERTEX: 1 << 3,\n};","import { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\ninterface IEventData{\r\n    func: Function;\r\n    target: any;\r\n}\r\n\r\ninterface IEvent{\r\n    [eventName: string]:IEventData[];\r\n}\r\n\r\n@ccclass('CustomEventListener')\r\nexport class CustomEventListener extends Component {\r\n    public static handle: IEvent = {};\r\n\r\n    // start listening event\r\n    public static on(eventName:string, cb:Function,target?:any){\r\n        if(!this.handle[eventName]){\r\n            this.handle[eventName] = [];\r\n        }\r\n\r\n        const data: IEventData = {func: cb, target};\r\n        this.handle[eventName].push(data);\r\n\r\n        \r\n    }\r\n\r\n    // cancel listening event\r\n    public static off(eventName:string, cb: Function, target?:any){\r\n        const list = this.handle[eventName];\r\n        if(!list || list.length <= 0){\r\n            return;\r\n        }\r\n        for(let i = 0; i < list.length; i++){\r\n            const event = list[i];\r\n            if(event.func === cb && (!target || target ===event.target)){\r\n                list.splice(i, 1);\r\n                break;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // dispatch the event\r\n    public static dispatchEvent (eventName: string, ...args:any){\r\n        const list = this.handle[eventName];\r\n        if(!list || list.length <= 0){\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < list.length; i++){\r\n            const event = list[i];\r\n            event.func.apply(event.target, args);\r\n        }\r\n    }\r\n}\r\n\r\n","import { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Dictionary')\r\nexport class Dictionary extends Component {\r\n    public key:string = '';\r\n    public value : [number];\r\n}\r\n\r\n","import { _decorator, Component, Node, Vec3,math, HingeConstraint, CCString, CCInteger,MeshRenderer, Collider, PhysicsGroup } from 'cc';\r\nimport { Manager } from './Manager';\r\nimport { Vertex } from './Vertex';\r\nimport { PHY_GROUP } from './Constant';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Edge')\r\nexport class Edge extends Component {\r\n\r\n    @property(Vertex)\r\n    public startVertex:Vertex;\r\n    @property(Vertex)\r\n    public endVertex:Vertex;\r\n\r\n    @property(CCString)\r\n    public edgeName:string = \"\";\r\n    @property(CCString)\r\n    public edgeID:string = \"\";\r\n    @property(CCString)\r\n    public srcID:string = \"\";\r\n    @property(CCString)\r\n    public dstID:string = \"\";\r\n    @property(Object)\r\n    public properties: Object = new Object();\r\n    @property(CCInteger)\r\n    public rank: number = 0;\r\n    @property(CCString)\r\n    public type: String = \"edge\";\r\n    @property(Boolean)\r\n    public isLayouted:boolean = false;\r\n\r\n    // @property(HingeConstraint)\r\n    // public startJoint = new HingeConstraint();\r\n    // @property(HingeConstraint)\r\n    // public endJoint = new HingeConstraint();\r\n\r\n    /**\r\n     * create Edge by the start vertex and end vertex\r\n     * @param startNode:Node of start\r\n     * @param endNode :Node of start\r\n     */\r\n    public createEdgeWithStartAndEnd(startNode: Node,endNode: Node){\r\n        this.startVertex = startNode.getComponent(Vertex);\r\n        this.endVertex = endNode.getComponent(Vertex);\r\n        let start = startNode.worldPosition, end = endNode.worldPosition;\r\n        // this.startPosition = start;\r\n        // this.endPosition = end;\r\n        const center = (start.clone()).add(end).multiplyScalar(0.5);\r\n        this.node.setWorldPosition(center);\r\n\r\n        // set distance\r\n        const length = Vec3.distance(start,end)/2;\r\n        this.node.setScale(0.002, length, 0.002 ); \r\n\r\n        const dir = Vec3.subtract(new Vec3(), end, start).normalize();\r\n        const right = new Vec3(0, 1, 0);\r\n        const quat = new math.Quat();\r\n        math.Quat.rotationTo(quat, right, dir);\r\n        this.node.setRotation(quat);\r\n        \r\n        // set ID\r\n        this.srcID = this.startVertex.getVertexID();\r\n        this.dstID = this.endVertex.getVertexID();\r\n        //this.edgeID = Manager.Instance().relationManager.setedgeID();\r\n\r\n                \r\n        //set joint\r\n\r\n        // this.startJoint = new HingeConstraint();\r\n        // this.startJoint.connectedBody = startVertex.getComponent(RigidBody);\r\n\r\n        // console.log(\"try to joint start!\", this.startJoint.connectedBody);\r\n        // this.startJoint.pivotA = start.clone().subtract(center);\r\n        // this.startJoint.axis = new Vec3(0, 1, 0);\r\n        // this.startJoint.pivotB = new Vec3(0, 0, 0);\r\n        // console.log(\"joint start!\");\r\n        // this.endJoint = new HingeConstraint()\r\n        // this.endJoint.connectedBody = endVertex.getComponent(RigidBody);\r\n        // // this.endJoint.pivotA = end.clone().subtract(center);\r\n        // // this.endJoint.pivotB = new Vec3(0, 0, 0);\r\n        // console.log(\"joint end!\")\r\n    }\r\n\r\n    /**\r\n     * change position with startNode and endNode\r\n     * @param startNode \r\n     * @param endNode \r\n     */\r\n    public resetPosition(startNode: Node,endNode: Node){\r\n        let start = startNode.worldPosition, end = endNode.worldPosition;\r\n        const center = (start.clone()).add(end).multiplyScalar(0.5);\r\n        this.node.setWorldPosition(center);\r\n\r\n        // set distance\r\n        const length = Vec3.distance(start,end)/2;\r\n        this.node.setScale(0.002, length, 0.002 ); \r\n\r\n        const dir = Vec3.subtract(new Vec3(), end, start).normalize();\r\n        const right = new Vec3(0, 1, 0);\r\n        const quat = new math.Quat();\r\n        math.Quat.rotationTo(quat, right, dir);\r\n        this.node.setRotation(quat);\r\n    }\r\n\r\n    /**\r\n     * In Edge class\r\n     * add edge info in individual vertex, veretex manager and edge manager\r\n     * must call after the edge basic info and vertex basic info be given \r\n     * better called after setAttribute()\r\n     */\r\n    public addAllThisVertexEdgeInfoOnEdge(){\r\n        if(Manager.Instance().vertexManager.vertexEdgeDic[this.srcID] == null) \r\n        {\r\n            Manager.Instance().vertexManager.vertexEdgeDic[this.srcID] = [];\r\n        }\r\n        if(Manager.Instance().vertexManager.vertexEdgeDic[this.dstID] == null) \r\n        {\r\n            Manager.Instance().vertexManager.vertexEdgeDic[this.dstID] = [];\r\n        }\r\n        //Manager.Instance().vertexManager.vertexEdgeDic[this.srcID].push(this.edgeID);\r\n        this.startVertex.addEdgeInfoOnVertex(this);\r\n        this.endVertex.addEdgeInfoOnVertex(this);\r\n\r\n        Manager.Instance().edgeManager.edgeVertexDic[this.edgeID] = [this.srcID, this.dstID];\r\n    }\r\n\r\n    /**\r\n     * get the edge ID\r\n     * @returns:String \r\n     */\r\n    public getEdgeID(){\r\n        return this.edgeID;\r\n    }\r\n\r\n    /**\r\n     * change the material of edge node\r\n     * material[1] is yellow --  the focused material\r\n     * material[2] is white -- the original material\r\n     * @param edgeNode \r\n     */\r\n    public changeEdgeMaterialToFocused(){\r\n        let focusMaterial = this.getComponent(MeshRenderer).getMaterial(1);\r\n        this.node.getComponent(MeshRenderer).setMaterial(focusMaterial,0);\r\n    }\r\n\r\n    /**\r\n     * return this edge node to original white material -- material[2]\r\n     */\r\n    public returnToInitialMaterial(){\r\n        let initialMaterial = this.getComponent(MeshRenderer).getMaterial(2);\r\n        this.getComponent(MeshRenderer).setMaterial(initialMaterial, 0);\r\n    }\r\n\r\n    /**\r\n     * set the attribute of Edge by json\r\n     * @param attribute \r\n     */\r\n    public setAttribute(attribute: any) {\r\n        for (let key in attribute) {\r\n            if (this.hasOwnProperty(key)) {\r\n                this[key] = attribute[key];\r\n            }\r\n        }\r\n        this.edgeID = this.srcID +\" \"+this.edgeName+\" \"+this.dstID;\r\n        //console.log(\"Edge ID:\"+this.edgeID)\r\n        Manager.Instance().relationManager.setEdgeID(this.edgeID);\r\n    }\r\n\r\n        /**\r\n     * present the details of edge\r\n     */\r\n    public showEdgeDetails(){\r\n        // console.log(\"Edge name:\"+this.edgeID);\r\n        \r\n        // console.log(\"src vectex ID:\"+this.srcID);\r\n        \r\n       \r\n        \r\n        Manager.Instance().UIManager.setRichInfo(\"Edge name:\"+this.edgeName);\r\n        Manager.Instance().UIManager.setRichInfo(\"Edge ID:\"+this.edgeID);\r\n        Manager.Instance().UIManager.addRichInfo(\"src vectex ID:\"+this.srcID);\r\n        Manager.Instance().UIManager.addRichInfo(\"dst vectex ID:\"+this.dstID);\r\n       \r\n        // for(let key in this.properties){\r\n        //     console.log(\"key:\",key);\r\n        //     console.log(key+\": \"+this.properties[key]);\r\n        //     Manager.Instance().UIManager.addRichInfo(key+\": \"+this.properties[key]);\r\n        // }\r\n        this.printNestedJSON(this.properties,\"properties\");\r\n        Manager.Instance().UIManager.addRichInfo(\"rank:\"+this.rank);\r\n\r\n    }\r\n\r\n    private printNestedJSON(obj, parentKey = '') {\r\n         for (let key in obj) {\r\n           let newKey = parentKey ? `${parentKey}.${key}` : key;\r\n           if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n             this.printNestedJSON(obj[key], newKey);\r\n           } else {\r\n            Manager.Instance().UIManager.addRichInfo(key+\": \"+this.properties[key]);\r\n           }\r\n         }\r\n    }\r\n\r\n}\r\n","import { _decorator, Component, Node, Prefab, instantiate, Vec3 } from 'cc';\r\nimport { Edge } from './Edge';\r\nimport { Vertex } from './Vertex';\r\nimport { Manager } from './Manager';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n/**\r\n * Manager of Edges\r\n */\r\n@ccclass('EdgeManager')\r\nexport class EdgeManager extends Component {\r\n\r\n    @property({ type: Prefab })\r\n    public edgePrefab: Prefab = null;\r\n\r\n    @property(Node)\r\n    public chosenEdgeNode:Node;\r\n\r\n    /**\r\n     * like{'0':[0,2]}\r\n     * means 0 is the id of one edge, and 0 is its startVertex id, 2 is its endVeretex id\r\n     */\r\n    public edgeVertexDic: { [key: string]: any } = {};\r\n\r\n    /**\r\n     *  create Edge\r\n     * @param startNode \r\n     * @param endNode \r\n     */\r\n    createEdgeWithStartAndEnd(startNode: Node, endNode: Node):Node {\r\n        const edgeNode = instantiate(this.edgePrefab);\r\n        //edgeNode.parent = startNode;\r\n        edgeNode.setParent(Manager.Instance().edgeManager.node);\r\n        let edge = edgeNode.getComponent(Edge);\r\n\r\n        edge.createEdgeWithStartAndEnd(startNode,endNode);\r\n\r\n\r\n        // console.log(\"vertex dic:\", Manager.Instance().vertexManager.vertexEdgeDic);\r\n        return edgeNode;\r\n       \r\n        \r\n    }\r\n\r\n\r\n    chooseNormalEdge(edgeNode:Node){\r\n        edgeNode.getComponent(Edge).changeEdgeMaterialToFocused();\r\n    }\r\n\r\n    public returnFocusToNormalEdge(){\r\n        \r\n        if(!this.chosenEdgeNode) return;\r\n        this.chosenEdgeNode.getComponent(Edge).returnToInitialMaterial();\r\n        this.chosenEdgeNode = null;\r\n        Manager.Instance().UIManager.cleanAndDisableInfoBar();\r\n        \r\n\r\n    }\r\n\r\n    public removeLayoutFlags(){\r\n        \r\n        for(let child of this.node.children){\r\n            //console.log(\"node name:\",child.name);\r\n            child.getComponent(Edge).isLayouted = false;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * destroy all edge by remove the etities and node in list\r\n     */\r\n    destroyAllEdges() {\r\n        this.node.destroyAllChildren();\r\n        this.node.removeAllChildren();\r\n        \r\n    }\r\n\r\n\r\n}\r\n","import { _decorator, Component, Node } from 'cc';\nimport { Manager } from './Manager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('Graphplayer')\nexport class Graphplayer extends Component {\n    protected start(): void {\n        \n        // (window as any).globalReceiveJSONByURL = this.buildByURL.bind(this);\n        // this.buildByURL(\"http://127.0.0.1:8000/table-details\")\n\n    }\n\n    /**\n     * receive JSON response\n     * @param url: get json response\n     */\n    public buildByURL(url:string){\n        Manager.Instance().canvasManager.cleanCanvas();\n        Manager.Instance().JSONReader.createByURL(url);\n    }\n\n    public buildByJSONString(jsonString:string){\n        Manager.Instance().JSONReader.createdByJSON(jsonString);\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('HttpRequest')\nexport class HttpRequest {\n    static send(url: string, data: object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        resolve(JSON.parse(xhr.responseText));\n                    } else {\n                        reject(new Error(xhr.statusText));\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(data));\n        });\n    }\n}\n","import { _decorator, Component, error, JsonAsset, Node,resources} from 'cc';\nconst { ccclass, property } = _decorator;\nimport { TableData } from './TableData';\nimport { Manager } from './Manager';\nimport { Vertex } from './Vertex';\nimport { Edge } from './Edge';\n\n\n@ccclass('JSONReader')\nexport class JSONReader extends Component {\n\n    @property({type: [TableData]})\n    public tableDataArray:Array<TableData>;\n\n\n\n    /**\n     * get JSON from file\n     * @param filename \n     */\n    public putJSONtoModel(filename: any){\n\n\n      /**\n       * load local JSON file in Response/...\n       */\n        let path = 'Response/' + filename;\n        this.loadJson(path, (tables) => {\n          this.transTabletoVertexAndEdge(tables);\n          \n          // console.log(\"set this.vertexIDBox args:\",Manager.Instance().relationManager.vertexIDBox);\n        });\n\n\n    }\n\n      // private loadJson(callback){\n      // resources.load('Response/sns', (err: any, res: JsonAsset) => {\n    private loadJson(path: string, callback: (tables: any) => void) {\n          resources.load(path, (err: any, res: JsonAsset) => {\n          if (err) {\n              error(err.message || err);\n              return;\n          }\n          // get data of JSON\n          let jsonData = res.json;\n          let tables = jsonData.data[0].data.tables;\n          callback(tables);\n          \n  \n  \n          });\n      }\n  \n\n    public getCookie(name:string) {\n        const value = \"; \" + document.cookie;\n        const parts = value.split(\"; \" + name + \"=\");\n        if (parts.length === 2) return decodeURIComponent(parts.pop().split(\";\").shift());\n    }\n    /**\n     * get json data  \n     * @param url: url of website to get json response\n     */\n    public createByURL(url:string){\n \n      //console.log(\"1.url:\",url)\n      \n      fetch(url).then((response: Response) => {\n        //console.log(\"url:\",url)\n        console.log(response)\n        return response.json();\n         }).then((value) => {\n        \n        let tables = value.data[0].data.tables;\n        this.transTabletoVertexAndEdge(tables);\n    }).catch((error) => console.error('Fetch error:', error));\n\n    }\n\n    public createdByJSON(jsonData:any){\n      // let tables = JSON.parse(jsonData).data[0].data.tables;\n      let tables = jsonData.data[0].data.tables;\n      this.transTabletoVertexAndEdge(tables);\n\n    }\n\n\n    private transTabletoVertexAndEdge(tables:any){\n      for(let i = 0; i < tables.length; i++) {\n        let edges = tables[i]._edgesParsedList;\n        let vertices = tables[i]._verticesParsedList;\n        \n    \n        /**\n         * only for table has 1 edge with 2 vertices\n         */\n        let edge = edges[0], startVertex = vertices[0],endVertex = vertices[1];\n        let startNode = null, endNode = null, edgeNode= null;\n\n        let isStartVertexExists = Manager.Instance().relationManager.existVertex(startVertex.vid);\n        let isEndVertexExits = Manager.Instance().relationManager.existVertex(endVertex.vid);\n        let isEdgeExits = Manager.Instance().relationManager.existEdge(startVertex.vid+\" \"+edge.edgeName+\" \"+endVertex.vid);\n        // when edge doesn't exist\n       \n        if(!isEdgeExits){\n          // create vertices ofstart, end and edge\n          if(!isStartVertexExists && !isEndVertexExits){\n\n              startNode = Manager.Instance().vertexManager.createStartNode();\n              startNode.getComponent(Vertex).setAttribute(startVertex);\n              endNode = Manager.Instance().vertexManager.createNodeAround(startNode);\n              endNode.getComponent(Vertex).setAttribute(endVertex);\n              edgeNode = Manager.Instance().edgeManager.createEdgeWithStartAndEnd(startNode, endNode);\n              edgeNode.getComponent(Edge).setAttribute(edge);\n              edgeNode.getComponent(Edge).addAllThisVertexEdgeInfoOnEdge();\n              /** increase degree */\n              startNode.getComponent(Vertex).increaseVertexDegree();\n              endNode.getComponent(Vertex).increaseVertexDegree();\n              Manager.Instance().relationManager.increaseTagDegree(startNode.getComponent(Vertex));\n              Manager.Instance().relationManager.increaseTagDegree(endNode.getComponent(Vertex));\n          }\n\n          // start vertex exsited, create end vertex and edge\n          else if(isStartVertexExists && !isEndVertexExits){\n              \n              startNode = Manager.Instance().vertexManager.getVertexNodeByVID(startVertex.vid);\n              endNode = Manager.Instance().vertexManager.createNodeAround(startNode);\n              endNode.getComponent(Vertex).setAttribute(endVertex);\n              edgeNode = Manager.Instance().edgeManager.createEdgeWithStartAndEnd(startNode, endNode);\n              edgeNode.getComponent(Edge).setAttribute(edge);\n              edgeNode.getComponent(Edge).addAllThisVertexEdgeInfoOnEdge();\n              /** increase degree */\n              startNode.getComponent(Vertex).increaseVertexDegree();\n              endNode.getComponent(Vertex).increaseVertexDegree();\n              Manager.Instance().relationManager.increaseTagDegree(startNode.getComponent(Vertex));\n              Manager.Instance().relationManager.increaseTagDegree(endNode.getComponent(Vertex));\n\n          }\n          // end vertex exsited, create start vertex and edge\n          else if(!isStartVertexExists && isEndVertexExits){\n            \n            endNode = Manager.Instance().vertexManager.getVertexNodeByVID(endVertex.vid);\n            startNode = Manager.Instance().vertexManager.createNodeAround(endNode);\n            startNode.getComponent(Vertex).setAttribute(startVertex);\n            edgeNode = Manager.Instance().edgeManager.createEdgeWithStartAndEnd(startNode, endNode);\n            edgeNode.getComponent(Edge).setAttribute(edge);\n            edgeNode.getComponent(Edge).addAllThisVertexEdgeInfoOnEdge();\n            /** increase degree */\n            startNode.getComponent(Vertex).increaseVertexDegree();\n            endNode.getComponent(Vertex).increaseVertexDegree();\n            Manager.Instance().relationManager.increaseTagDegree(startNode.getComponent(Vertex));\n            Manager.Instance().relationManager.increaseTagDegree(endNode.getComponent(Vertex));\n\n          }\n          // both start and end vertex exsited, only create edge\n          else if(isStartVertexExists && isEndVertexExits){\n            \n            startNode = Manager.Instance().vertexManager.getVertexNodeByVID(startVertex.vid);\n            endNode = Manager.Instance().vertexManager.getVertexNodeByVID(endVertex.vid);\n            edgeNode = Manager.Instance().edgeManager.createEdgeWithStartAndEnd(startNode, endNode);\n            edgeNode.getComponent(Edge).setAttribute(edge);\n            edgeNode.getComponent(Edge).addAllThisVertexEdgeInfoOnEdge();\n            /** increase degree */\n            startNode.getComponent(Vertex).increaseVertexDegree();\n            endNode.getComponent(Vertex).increaseVertexDegree();\n            Manager.Instance().relationManager.increaseTagDegree(startNode.getComponent(Vertex));\n            Manager.Instance().relationManager.increaseTagDegree(endNode.getComponent(Vertex));\n\n            \n\n          }\n          // no such situation\n          /*\n          else if(isStartVertexExists && isEdgeExits){\n            \n            startNode = Manager.Instance().vertexManager.getVertexNodeByVID(startVertex.vid);\n            endNode = Manager.Instance().vertexManager.getVertexNodeByVID(endVertex.vid);\n            edgeNode = Manager.Instance().edgeManager.createEdgeWithStartAndEnd(startNode, endNode);\n            edgeNode.getComponent(Edge).setAttribute(edge);\n            edgeNode.getComponent(Edge).addAllThisVertexEdgeInfoOnEdge();\n            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n          }*/\n          \n        }\n\n        /*\n        for(let j = 0; j < edges.length; j++) {\n            let edge = edges[j];\n            console.log(\"Edge: \"+ i +\" Edge SrcID: \" + edge.srcID +\"Edge DstID: \" + edge.dstID);\n            \n        }        \n        for(let j = 0; j < vertices.length; j++) {\n            let vertex = vertices[j];\n            console.log(\"Vertex ID: \" + vertex.vid);\n            \n        }\n        */\n\n\n    }\n    //console.log(\"relation vertex:\",Manager.Instance().relationManager.vertexIDBox);\n  }\n}\n\n","import { _decorator, Component, Node, Vec3, Quat, VERSION, instantiate, math} from 'cc';\nimport { Manager } from './Manager';\nimport { Vertex } from './Vertex';\nimport { Edge } from './Edge';\nconst { ccclass, property } = _decorator;\n\n@ccclass('LayoutManager')\nexport class LayoutManager extends Component {\n    private tagsNodeList = [] // restore the empty nodes of tags such like: player, team...\n\n    public centerToTag0Radius = 3; // radius between node and center\n\n    public tagsNodeRadius = 1.5; // radius between nodes of different tags, like tag 0 node and tag 1 nodes...\n\n    private nodesLayerRadiusInterval = Math.PI * 1/12;\n\n\n    /**\n     * re-classify nodes by tags\n     * the vertex with tag will be the child of corresponding tagNode\n     */\n    public classifyNodeByTag(){\n        let tagNodeCount = 0;\n        //this.tagsNodeList = [];\n        \n        /**\n         * set the tagNodeList(store Node)\n         */\n        try{\n            for(let tag of Manager.Instance().vertexManager.vertexTagSet){\n                if(!Manager.Instance().vertexManager.rootNode.getChildByName(tag))\n                {\n                    let newTagNode = new Node(tag);\n                    newTagNode.parent = Manager.Instance().vertexManager.rootNode;\n                    newTagNode.name = tag;\n                    this.tagsNodeList.push(newTagNode);\n                }\n            }\n\n          \n            while(Manager.Instance().vertexManager.rootNode.children.length > this.tagsNodeList.length ){\n                // let childVertex = Manager.Instance().vertexManager.rootNode.children[0];\n                let childVertex = Manager.Instance().vertexManager.rootNode.children[tagNodeCount];\n                if(childVertex.getComponent(Vertex) != null) {\n                    let vertexTag  = childVertex.getComponent(Vertex).tags[0];\n                    childVertex.setParent(Manager.Instance().vertexManager.rootNode.getChildByName(vertexTag));\n                    \n                }\n                else{\n                    tagNodeCount++;\n                }\n            \n            }\n            \n        }\n        catch(error){\n            console.log(error)\n        }\n\n        this.nodesLayerRadiusInterval = Math.PI / 2 / this.tagsNodeList.length;\n\n\n    }\n\n    /**\n     * change the orders of tags\n     * @param tagsName: string slist if tags\n     */\n    public adjustOrderOfTags(tagsName:string[]){\n        this.tagsNodeList = []; \n        console.log(\"order by,\", tagsName);\n        for(let tagName of tagsName){\n            this.tagsNodeList.push(Manager.Instance().vertexManager.rootNode.getChildByName(tagName));\n        } \n       \n    }\n\n    /**\n     * one method to re-Layout by tags\n     */\n    public reLayoutByTags(){\n\n        /**\n         * reLayout tag 0 node, with rootNode as center\n         */\n        let center = Manager.Instance().vertexManager.rootNode.worldPosition;\n        let nodes = this.tagsNodeList[0].children; // list of nodes around center\n        let angleStep = 2 * Math.PI / nodes.length; // set the step of angle\n        for (let i = 0; i < nodes.length; i++) {\n            let angle = i * angleStep; // set nodes angles\n        \n            // calculate the position \n            let x = center.x + this.centerToTag0Radius * Math.cos(angle);\n            let y = center.y;\n            let z = center.z + this.centerToTag0Radius * Math.sin(angle);\n        \n            nodes[i].setWorldPosition(x, y, z); // set postion of node\n            nodes[i].getComponent(Vertex).isLayouted = true; // if do not have this sentencec, nodes will layout like tree\n        }\n\n        /**\n         * tag 1--n: rotate with tag 0 align on another plant\n         * realign edge as well\n         */\n    \n        for(let tag0Node of nodes){\n\n\n                this.updateEndVertexAndEdge(tag0Node);\n\n    }\n\n    }\n\n    // private traverseNodeAndUpdate(rootNode:Node){\n    //     for(let child of rootNode.children){\n    //         this.updateEndVertexAndEdge(child);\n\n    //     }\n    // }\n\n    /**\n     * update the endvertex and edge of one start vertex\n     * @param startVertex: the center of the sub-layer of endvertex and edge\n     */\n    private updateEndVertexAndEdge(startVertex:Node){\n\n       \n       // if(startVertex.getComponent(Vertex).edgesSetOfVertex.length <= 1) return;\n        let edgeNum = startVertex.getComponent(Vertex).edgesSetOfVertex.length;\n        \n        \n        \n        // if(edgeNum < 2) return;\n\n        let areAllEdgesLayouted = true;\n        for(let edge of startVertex.getComponent(Vertex).edgesSetOfVertex){\n            \n            if(edge.isLayouted == false) areAllEdgesLayouted = false;\n            // else{\n            //     console.log(\"unlayouted edge:\",edge.edgeID)\n            // }\n        }\n        if(areAllEdgesLayouted) return;\n        let center = startVertex.worldPosition;\n        \n        // calcualte the normal vector of plant of tag0, rootNode and up-vector\n        let normal = new Vec3();\n        Vec3.cross(normal, Vec3.subtract(new Vec3(), center, Vec3.ZERO), Vec3.UP);\n        Vec3.normalize(normal, normal);\n\n        /**\n         * calculate initial vector of plant of tag0, rootNode and up-vector\n         */\n        let initialVector = new Vec3();\n        // Vec3.cross(initialVector, normal, Vec3.subtract(new Vec3(), center, Vec3.ZERO));\n        initialVector = Vec3.subtract(new Vec3(), center, Vec3.ZERO);\n        Vec3.normalize(initialVector, initialVector);\n        //let selfAngleStep = 2 * Math.PI / edgeNum; // rotate on 2 PI\n        let selfAngleStep =  Math.PI / edgeNum;// rotate on PI\n        let initialAngle =  Math.PI * 3/2;\n        let selfAngle = 0; // initial angle --- PI/6 and it orient outside\n        let derivedNodeCount = 0;\n       \n        for(let i = 0; i < startVertex.getComponent(Vertex).edgesSetOfVertex.length; i++){\n            let edge = startVertex.getComponent(Vertex).edgesSetOfVertex[i];\n            if(edge.isLayouted) continue;\n            let endVertex = edge.endVertex;\n            \n            /**\n             * different tag with different normal and initialVector\n             */\n            let angleBiasBetweenTags = this.getTagIndex(endVertex.getComponent(Vertex).tags[0]) * this.nodesLayerRadiusInterval; // set the bias of each tag, ranked by first index\n            let quat = new Quat();\n            let tmp_normal = new Vec3();\n           \n            let tmp_initialVector = new Vec3();\n            Quat.fromAxisAngle(quat, normal, angleBiasBetweenTags);\n            // trans normal\n            Vec3.transformQuat(tmp_initialVector, initialVector, quat);\n            Quat.fromAxisAngle(quat, initialVector, angleBiasBetweenTags);\n            // trans normal\n            Vec3.transformQuat(tmp_normal, normal, quat);\n\n            if(edge.startVertex.vid != startVertex.getComponent(Vertex).vid){\n                endVertex = edge.startVertex;\n            }\n            if(!endVertex.isLayouted){\n\n                let position = new Vec3();\n                let vectorWithRadius = new Vec3();\n                selfAngle = initialAngle + selfAngleStep * this.getElementIndex(edge, startVertex.getComponent(Vertex).edgesSetOfVertex);\n                Vec3.multiplyScalar(vectorWithRadius,tmp_initialVector.clone(), this.tagsNodeRadius);\n                //console.log(\"vectorWithRadius:\",vectorWithRadius,\"tmp_initialVector.clone():\",tmp_initialVector.clone(),\"this.tagsNodeRadius:\",this.tagsNodeRadius)\n                let quaternion = new Quat();\n                Quat.fromAxisAngle(quaternion, tmp_normal,selfAngle);\n            \n\n\n                Vec3.transformQuat(vectorWithRadius, vectorWithRadius, quaternion);\n            \n                Vec3.add(position, center.clone(), vectorWithRadius);\n                endVertex.node.setWorldPosition(position);\n                \n                endVertex.isLayouted = true;\n                derivedNodeCount++;\n                \n                // selfAngle += initialAngle + derivedNodeCount * selfAngleStep; // update angle\n                //console.log(\"start:\",startVertex.getComponent(Vertex).vid, \" :\",endVertex.vid,\" degree:\",selfAngle/Math.PI,\" adding:\",selfAngleStep/Math.PI)\n                \n                \n            }\n            /** \n             * reLayout the edge\n             */\n            //console.log(startVertex.getComponent(Vertex).vid+\" count:\",derivedNodeCount, \"len:\",startVertex.getComponent(Vertex).edgesSetOfVertex.length)\n            edge.resetPosition(startVertex, endVertex.node);\n            edge.isLayouted = true;\n            this.updateEndVertexAndEdge(endVertex.node);\n        }\n\n       \n        //console.log(\"edge after:\",Manager.Instance().edgeManager.node.children.length)\n            \n    }\n\n    /**\n     * each child of one tag with same material\n     */\n    public materialReallocated(){\n        let tagIndex = 2;\n\n        for(let tagNode of this.tagsNodeList){\n            for(let childVertex of tagNode.children){\n                childVertex.getComponent(Vertex).setMaterialCode(tagIndex);//change the material code\n                childVertex.getComponent(Vertex).changeMaterial(tagIndex);\n            }\n            tagIndex++;\n        }\n    }\n\n    /**\n     * getTagIndex in list of tags\n     * @param tag \n     * @returns \n     */\n    private getTagIndex(tag:string) {\n        for(let index = 0; index < this.tagsNodeList.length; index++){\n            if(this.tagsNodeList[index].name == tag) return index;\n        }\n        return -1;\n    }\n\n    /**\n     * get element index in lists\n     * @param element \n     * @param list \n     * @returns \n     */\n    private getElementIndex(element:any, list:any[]){\n        for(let index = 0; index < list.length; index++){\n            if(list[index] == element) return index;\n        }\n        return -1;\n    }\n\n    /**\n     *  transform taglist(Node) to taglist(string)\n     * @returns \n     */\n    public getTags():string[]{\n        let tagList = [];\n        for(let tagNode of this.tagsNodeList){\n            tagList.push(tagNode.name);\n        }\n        return tagList; \n    }\n\n    public clearTags(){\n        this.tagsNodeList = [];\n        Manager.Instance().relationManager.tagDegreeDic = [];\n        Manager.Instance().relationManager.tagDegreeDicLength = 0;\n    }\n}","import { _decorator, Component,physics } from 'cc';\r\nimport { CameraController } from './CameraController';\r\nimport { VertexManager } from './VertexManager';\r\nimport { CanvasManager } from './CanvasManager';\r\nimport { EdgeManager } from './EdgeManager';\r\nimport { RelationManager } from './RelationManager';\r\nimport { UIManager } from './UIManager';\r\nimport { JSONReader } from './JSONReader';\r\nimport { LayoutManager } from './LayoutManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Manager')\r\nexport class Manager extends Component {\r\n \r\n    \r\n    @property(CameraController)\r\n    public cameraController: CameraController;\r\n\r\n    @property(VertexManager)\r\n    public vertexManager: VertexManager;\r\n\r\n    @property(CanvasManager)\r\n    public canvasManager: CanvasManager;\r\n\r\n    @property(EdgeManager)\r\n    public edgeManager: EdgeManager;\r\n\r\n    @property(RelationManager)\r\n    public relationManager: RelationManager;\r\n\r\n    @property(UIManager)\r\n    public UIManager: UIManager;\r\n\r\n    @property(JSONReader)\r\n    public JSONReader:JSONReader;\r\n\r\n    @property(LayoutManager)\r\n    public layoutManager:LayoutManager;\r\n\r\n    static instance:Manager = new Manager();\r\n\r\n    protected onLoad(): void {\r\n        console.log(\"Manager!\")\r\n        physics.PhysicsSystem.instance.enable = true;\r\n        Manager.instance.cameraController = this.node.getChildByName('CameraController').getComponent(CameraController);\r\n        Manager.instance.vertexManager = this.node.getChildByName('Canvas').getChildByName('VertexManager').getComponent(VertexManager);\r\n        Manager.instance.canvasManager = this.node.getChildByName('CanvasManager').getComponent(CanvasManager);\r\n        Manager.instance.edgeManager = this.node.getChildByName('EdgeManager').getComponent(EdgeManager);\r\n        Manager.instance.relationManager = this.node.getChildByName('RelationManager').getComponent(RelationManager);\r\n        Manager.instance.UIManager = this.node.getChildByName('Canvas').getChildByName('UIManager').getComponent(UIManager);\r\n        Manager.instance.JSONReader = this.node.getChildByName('JSONReader').getComponent(JSONReader);\r\n        Manager.instance.layoutManager = this.node.getChildByName('LayoutManager').getComponent(LayoutManager);\r\n        Manager.Instance();\r\n\r\n        console.log(\"find: \", Manager.instance.edgeManager);\r\n    }\r\n    \r\n    \r\n\r\n    \r\n    static Instance(){\r\n        if(!Manager.instance){\r\n            Manager.instance = new Manager();\r\n\r\n        }\r\n        return Manager.instance;\r\n    }\r\n\r\n}\r\n\r\n","import { _decorator, CCInteger, CCString, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { Vertex } from './Vertex';\r\n\r\n@ccclass('RelationManager')\r\nexport class RelationManager extends Component {\r\n\r\n    @property({ type:Set })\r\n    vertexIDBox:Set<string> = new Set<string>();\r\n\r\n    @property({ type:Set})\r\n    edgeIDBox:Set<string> = new Set<string>();\r\n\r\n\r\n    @property(CCInteger)\r\n    vertexCount:number = 0;\r\n\r\n    @property(CCInteger)\r\n    edgeCount:number = 0;\r\n\r\n    \r\n    public tagDegreeDic: {[key:number]:any[]} = {}; \r\n\r\n    public tagDegreeDicLength = 0;\r\n\r\n    protected onLoad(): void {\r\n        this.vertexIDBox = new Set<string>();\r\n        this.edgeIDBox = new Set<string>();\r\n\r\n    }\r\n    /**\r\n     * set the vertexID self-defined\r\n     * @param s \r\n     */\r\n    public setVertexID(...args: string[]){ \r\n        \r\n        if(args.length == 1){\r\n            let [s] = args;\r\n            this.vertexIDBox.add(s);\r\n            this.vertexCount++;\r\n            return s;\r\n        }\r\n        else{\r\n            this.vertexCount++;\r\n            this.vertexIDBox.add( \"\" + this.vertexCount);\r\n            return \"\" + this.vertexCount;\r\n        }\r\n        \r\n        \r\n        // return this.vertexIDBox;\r\n        \r\n    }\r\n\r\n    /**\r\n     * pop the last element from Box\r\n     */\r\n    public removeVertex(vid: string){\r\n\r\n        if(this.vertexIDBox.has(vid)){\r\n            this.vertexIDBox.delete(vid);\r\n            this.vertexCount--;\r\n        }\r\n\r\n    }\r\n\r\n    public removeEdge(edgeID){\r\n        if(this.edgeIDBox.has(edgeID)){\r\n            this.edgeIDBox.delete(edgeID);\r\n            this.edgeCount--;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public setEdgeID(...args:string[]){\r\n        if(args.length == 1){\r\n            let [s] = args;\r\n            this.edgeIDBox.add(s);\r\n            this.edgeCount++;\r\n            return s;\r\n        }\r\n        else{\r\n            return \"\" + this.edgeCount;\r\n        }\r\n    }\r\n\r\n    public resetVertexAndEdgeBox(){\r\n        // console.log(this.vertexIDBox)\r\n        this.vertexIDBox.clear();\r\n        // this.vertexIDBox = new Set<string>();\r\n        this.edgeIDBox.clear();\r\n        this.vertexCount = 0;\r\n        this.edgeCount = 0;\r\n    }\r\n\r\n    public existVertex(vertexID:String):boolean{\r\n        for(let entry of this.vertexIDBox){\r\n            if(vertexID == entry) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public existEdge(edgeID:String):boolean{\r\n        for(let entry of this.edgeIDBox){\r\n            if(edgeID == entry) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // public increaseVertexDegree(vertex: Vertex){\r\n    //     let vid = vertex.vid;\r\n    //     this.vertexDegreeDic[vid]++;\r\n    //     //console.log(\"vertex:\",vid,\" number:\",this.vertexDegreeDic[vid])\r\n    // }\r\n\r\n\r\n    /**\r\n     * increase the degree of tag which the vertex belongs to\r\n     * @param vertex \r\n     */\r\n    public increaseTagDegree(vertex: Vertex){\r\n        if(!(vertex.tags[0] in this.tagDegreeDic)){\r\n            this.tagDegreeDic[vertex.tags[0]] = \"\";\r\n            this.tagDegreeDicLength++;\r\n        }\r\n        this.tagDegreeDic[vertex.tags[0]]++;\r\n    }\r\n}\r\n\r\n","import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { Edge } from './Edge';\nimport { Vertex } from './Vertex';\n\n/**\n * data structure contain edges, vertices and thier properties\n */\n@ccclass('TableData')\nexport class TableData extends Component {\n    edges: Array<Edge>;\n    vertices: Array<Vertex>;\n\n    constructor(data: any) {\n        super();\n        this.edges = data._edgesParsedList.map((edgeData: any) => new Edge(edgeData));\n        this.vertices = data._verticesParsedList.map((vertexData: any) => new Vertex(vertexData));\n    }\n}\n\n","import { _decorator, Component, Node,EventHandler,Button, RichText, Layout, EventMouse,resources, Prefab, instantiate, Label, UITransform, EditBox } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { Manager } from './Manager';\r\nimport { Vertex } from './Vertex';\r\nimport { HttpRequest } from './HttpRequest';\r\n\r\n@ccclass('UIManager')\r\nexport class UIManager extends Component {\r\n\r\n    clickEventHandler = new EventHandler();\r\n\r\n    @property(Button)\r\n    private refreshBtn:Button;\r\n\r\n    @property(Button)\r\n    private createCanvasFromJSONButton:Button;\r\n\r\n    \r\n    @property(EditBox)\r\n    public createCanvasFromJSONEditBox:EditBox\r\n\r\n    @property(Node)\r\n    public nodeInfoBar:Node;\r\n\r\n    @property(RichText)\r\n    private nodeInfoText:RichText;\r\n\r\n    @property(Button)\r\n    private createVertexBtn:Button;\r\n    \r\n    @property(Button)\r\n    private createEdgeBtn:Button;\r\n\r\n    @property(Button)\r\n    private deleteVertexBtn:Button;\r\n\r\n    @property(Button)\r\n    private layoutBtn:Button;\r\n\r\n    @property(Layout)\r\n    public dropDownBarLayout:Layout;\r\n\r\n\r\n    /** record the list of tags */\r\n    @property(Layout)\r\n    public tagOrderChoiceBar:Layout;\r\n    @property({type: [Node]})\r\n    public tagOrderChoiceBtnList:Array<Node>;\r\n    @property(Prefab)\r\n    private tagOrderChoiceBtnPrefab:Prefab \r\n\r\n    /**for user to input instruction */\r\n    @property(EditBox)\r\n    public userInputBar:EditBox;\r\n\r\n    @property(Button)\r\n    public submitInputButton:Button;\r\n\r\n    /** hide UI */\r\n    @property(Button)\r\n    public hideUIColumnBtn:Button;\r\n    /** show the hiden UI */\r\n    @property(Button)\r\n    public showUIColumnBtn:Button;\r\n\r\n    /**  root node of hide column*/\r\n    @property(Node)\r\n    public hideColumnNode:Node;\r\n\r\n    public jsonResponseUrl = \"http://127.0.0.1:8080\"; // get the table-details \r\n\r\n    private vertexIDLabelManager: Node;\r\n\r\n    private vertexIDLabelPrefab: Prefab;\r\n\r\n\r\n\r\n\r\n    /**\r\n     * attributes of tag Order bar and its choices buttons\r\n     */\r\n    private BtnWidth = 30;\r\n    private BtnLength = 170;\r\n    private timer = 0;\r\n    private isEnteredTagOrderChoiceBar = false;\r\n    \r\n    /**\r\n     * attributes of rich info about vertices and edges\r\n     */\r\n    public isNodeInfoEnable = false;\r\n    private nodeInfoPrefix = \"<color=#ffffff>\";\r\n    private nodeInfoSuffix = \"\\n</f>\";\r\n\r\n\r\n\r\n    protected onLoad(): void {\r\n            // initiate infomation bar\r\n            this.nodeInfoBar = this.node.getChildByName('InfoBar');\r\n            this.nodeInfoText = this.nodeInfoBar.getChildByName('NodeInfoText').getComponent(RichText);\r\n            // input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this); // set the progation prevented\r\n            // input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\r\n            // this.tagOrderChoiceBtnList = new Array<Node>();\r\n                    // 使用cc.resources.load来加载预制体\r\n        resources.load(\"Prefab/VertexIDLabel\" , Prefab, (err, prefab) => {\r\n            if (err) {\r\n                console.error(\"Failed to load prefab:\", err);\r\n                return;\r\n            }\r\n            else{\r\n                this.vertexIDLabelPrefab = prefab;\r\n            }\r\n        });\r\n    }\r\n\r\n    start () {\r\n\r\n\r\n        // initiate hide column button\r\n        this.hideUIColumnBtn = this.node.getChildByName(\"HideUIColumnBtn\").getComponent(Button);\r\n        const hideUIColumnClickEventHandler = new EventHandler();\r\n        hideUIColumnClickEventHandler.target = this.node;\r\n        hideUIColumnClickEventHandler.component = 'UIManager';\r\n        hideUIColumnClickEventHandler.handler = 'hideUIColumn';\r\n        this.hideUIColumnBtn.clickEvents.push(hideUIColumnClickEventHandler);\r\n\r\n        // initiate show column button\r\n\r\n        this.showUIColumnBtn = this.node.getChildByName(\"ShowUIColumnBtn\").getComponent(Button);\r\n        const showUIColumnClickEventHandler = new EventHandler();\r\n        showUIColumnClickEventHandler.target = this.node;\r\n        showUIColumnClickEventHandler.component = 'UIManager';\r\n        showUIColumnClickEventHandler.handler = 'showUIColumn';\r\n        this.showUIColumnBtn.clickEvents.push(showUIColumnClickEventHandler);\r\n        /**\r\n        * hide cloumn\r\n        */\r\n\r\n         this.hideColumnNode =  this.node.getChildByName('HideColumn');\r\n        \r\n        // initiate user input bar\r\n        this.userInputBar = this.hideColumnNode.getChildByName(\"UserInputBar\").getComponent(EditBox);\r\n        this.submitInputButton = this.hideColumnNode.getChildByName('SubmitInputBtn').getComponent(Button);\r\n        const submitInputClickEventHandler = new EventHandler();\r\n        submitInputClickEventHandler.target = this.node;\r\n        submitInputClickEventHandler.component = 'UIManager';\r\n        submitInputClickEventHandler.handler = 'submitUserInput';\r\n        this.submitInputButton.clickEvents.push(submitInputClickEventHandler);\r\n  \r\n       \r\n        // initiate refresh button\r\n        const refreshClickEventHandler = new EventHandler();\r\n        // this.refreshBtn = this.node.getChildByName('RefreshBtn').getComponent(Button);\r\n        this.refreshBtn = this.hideColumnNode.getChildByName('RefreshBtn').getComponent(Button);\r\n        refreshClickEventHandler.target = this.node; // node name\r\n        refreshClickEventHandler.component = 'UIManager';// script name\r\n        refreshClickEventHandler.handler = 'RefreshCanvas'; // method name\r\n        // const button = this.node.getComponent(Button);\r\n        this.refreshBtn.clickEvents.push(refreshClickEventHandler);\r\n\r\n        // initiate the JSON button\r\n        // const createCanvasFromJSONFileEventHandler =  new EventHandler();\r\n        // this.createCanvasFromJSONButton = this.node.getChildByName('CreateByJSONBtn').getComponent(Button);\r\n        // this.createCanvasFromJSONEditBox = this.createCanvasFromJSONButton.node.getChildByName(\"EditBox\").getComponent(EditBox);\r\n        // createCanvasFromJSONFileEventHandler.target = this.node;\r\n        // createCanvasFromJSONFileEventHandler.component = 'UIManager';\r\n        // createCanvasFromJSONFileEventHandler.customEventData = 'web';\r\n        // createCanvasFromJSONFileEventHandler.handler = 'createCanvasFromJSONFile';\r\n        // this.createCanvasFromJSONButton.clickEvents.push(createCanvasFromJSONFileEventHandler);\r\n\r\n        /**\r\n         * initial the drop-down bar\r\n         */\r\n        this.dropDownBarLayout =  this.node.getChildByName(\"DropDownBar\").getComponent(Layout);\r\n        this.dropDownBarLayout.node.active = false;\r\n        \r\n        // initial Layout Btn\r\n\r\n        const layoutEventHandler = new EventHandler();\r\n\r\n        // this.layoutBtn = this.node.getChildByName(\"LayoutGreyBtn\").getComponent(Button);\r\n        this.layoutBtn = this.hideColumnNode.getChildByName(\"LayoutGreyBtn\").getComponent(Button);\r\n        this.tagOrderChoiceBar = this.layoutBtn.node.getChildByName(\"TagOrderChoiceBar\").getComponent(Layout); \r\n        this.tagOrderChoiceBar.node.active = false;\r\n        /**\r\n         * listen on layout btn\r\n         */\r\n\r\n\r\n        this.layoutBtn.node.on(Node.EventType.MOUSE_ENTER, this.chooseLayoutBtn.bind(this, layoutEventHandler),this);\r\n        \r\n        this.layoutBtn.node.on(Node.EventType.MOUSE_LEAVE, this.onLayoutBtnMouseLeave,this);\r\n  \r\n        //this.tagOrderChoiceBar.node.on(Node.EventType.MOUSE_ENTER, this.onMouseEnterTagOrderChoiceBar, this);\r\n        this.tagOrderChoiceBar.node.on(Node.EventType.MOUSE_MOVE, this.onMouseEnterTagOrderChoiceBar, this); // listen on mouse enter in tagOrderChoiceBar \r\n        // this.tagOrderChoiceBar.node.on(Node.EventType.MOUSE_LEAVE,(event:EventMouse) => {\r\n        //     this.isEnteredTagOrderChoiceBar = false;\r\n        // }, this);\r\n\r\n        /** close by click mouse on CanvasMAnager.onMouseUp() */\r\n        this.tagOrderChoiceBar.node.on(Node.EventType.MOUSE_LEAVE,this.onMouseLeaveTagOrderChoiceBar, this);\r\n        // // initial createVertexBtn \r\n        // const createVertexEventHandler = new EventHandler();\r\n        // this.createVertexBtn = this.dropDownBarLayout.node.getChildByName(\"CreateVertexBtn\").getComponent(Button);\r\n        // createVertexEventHandler.target = this.node;\r\n        // createVertexEventHandler.component = \"UIManager\";\r\n        // createVertexEventHandler.handler = \"createVertex\";\r\n        // this.createVertexBtn.clickEvents.push(createVertexEventHandler);\r\n\r\n        // // initial deleteVeretxBtn\r\n        // const deleteVertexEventHandler = new EventHandler();\r\n        // this.deleteVertexBtn = this.dropDownBarLayout.node.getChildByName(\"DeleteVertexBtn\").getComponent(Button);\r\n        // deleteVertexEventHandler.target = this.node;\r\n        // deleteVertexEventHandler.component = \"UIManager\";\r\n        // deleteVertexEventHandler.handler = \"createVertex\";\r\n       \r\n\r\n        // this.deleteVertexBtn.clickEvents.push(createVertexEventHandler);\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * hide UI column\r\n     * @param event \r\n     */\r\n    private hideUIColumn(event:Event){\r\n        this.hideColumnNode.active = false;\r\n        this.showUIColumnBtn.node.active = true;\r\n        this.hideUIColumnBtn.node.active = false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * show UI column \r\n     * @param event \r\n     */\r\n    private showUIColumn(event:Event){\r\n        this.hideColumnNode.active = true;\r\n        this.hideUIColumnBtn.node.active = true;\r\n        this.showUIColumnBtn.node.active = false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * submit input in userInputBar to server\r\n     * @param event \r\n     */\r\n    public submitUserInput(event:Event){\r\n        console.log(\"press submit\")\r\n        let content = this.userInputBar.string;\r\n        HttpRequest.send(this.jsonResponseUrl, { nGQL: content }).then((response) => {\r\n            // 处理响应\r\n            console.log(\"res:\", response);\r\n            Manager.Instance().canvasManager.cleanCanvas();\r\n            Manager.Instance().JSONReader.createdByJSON(response);\r\n\r\n        }).catch((error) => {\r\n            // 处理错误\r\n            console.error(error);\r\n        });\r\n        this.userInputBar.string = \"\";\r\n\r\n\r\n        \r\n    }\r\n\r\n    public RefreshCanvas(event:Event){\r\n        \r\n        Manager.Instance().canvasManager.resetCanvas();\r\n        //Manager.Instance().JSONReader.putJSONtoModel(\"\");\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @param event \r\n     * @param method:\"local\" or \"web\" \r\n     */\r\n    // public createCanvasFromJSONFile(event:Event, method: string){\r\n    //     Manager.Instance().canvasManager.cleanCanvas();\r\n        \r\n    //     if(method == \"local\"){\r\n    //         const jsonFilename = this.createCanvasFromJSONEditBox.string;\r\n    //         Manager.Instance().JSONReader.putJSONtoModel(jsonFilename);\r\n    //     }\r\n    //     else if(method == \"web\"){\r\n        \r\n    //         Manager.Instance().JSONReader.createByURL(this.jsonResponseUrl);\r\n    //    }\r\n    // }\r\n\r\n    \r\n\r\n    public createVertex(event:Event){\r\n        // if the node is vertex\r\n       \r\n        \r\n        if(Manager.Instance().vertexManager.chosenVertex != null && Manager.Instance().edgeManager.chosenEdgeNode == null){\r\n            \r\n            let childVertex = Manager.Instance().vertexManager.createNodeAround(Manager.Instance().vertexManager.chosenVertex);\r\n            Manager.Instance().edgeManager.createEdgeWithStartAndEnd(Manager.Instance().vertexManager.chosenVertex, childVertex);\r\n        }\r\n        else if(Manager.Instance().vertexManager.chosenVertex == null && Manager.Instance().edgeManager.chosenEdgeNode != null){\r\n            \r\n            /**\r\n             * To-do create on edge\r\n             */\r\n\r\n        }\r\n        this.dropDownBarLayout.node.active = false;\r\n    }\r\n\r\n    /**\r\n     * when press layout btn\r\n     * @param event \r\n     * @param finalTagOrder \r\n     */\r\n    public changeLayout(event:Event, finalTagOrder: string){\r\n        let finalTagOrderList = finalTagOrder.split(\",\");\r\n        //console.log(\"finalTagOrder:\",finalTagOrder+\"finalTagOrderList:\",finalTagOrderList)\r\n        this.tagOrderChoiceBar.node.active = false;\r\n        this.dropDownBarLayout.node.active = false;\r\n        \r\n        Manager.Instance().vertexManager.removeLayoutFlags();\r\n        \r\n        Manager.Instance().edgeManager.removeLayoutFlags();\r\n        \r\n        Manager.Instance().layoutManager.classifyNodeByTag();\r\n        Manager.Instance().layoutManager.adjustOrderOfTags(finalTagOrderList);\r\n        // Manager.Instance().layoutManager.adjustOrderOfTags([\"team\",\"player\"]);\r\n        Manager.Instance().layoutManager.materialReallocated();\r\n        Manager.Instance().layoutManager.reLayoutByTags();\r\n    }\r\n\r\n\r\n    /**\r\n     * when mouse enter drop down bar of tag of layout \r\n     * @param event \r\n     */\r\n    private onMouseEnterTagOrderChoiceBar(event: EventMouse){\r\n        \r\n        this.isEnteredTagOrderChoiceBar = true;\r\n       \r\n    }\r\n\r\n    /**\r\n     * when mouse leave drop down bar of tag of layout \r\n     * @param event \r\n     */\r\n    private onMouseLeaveTagOrderChoiceBar(event:EventMouse){\r\n       \r\n        this.isEnteredTagOrderChoiceBar = false;\r\n        \r\n        this.tagOrderChoiceBar.node.active = false;\r\n    }\r\n    /**\r\n     * set the info\r\n     * @param info: info of vertex and edge\r\n     */\r\n    public setRichInfo(info:string){\r\n        this.nodeInfoBar.active = true;\r\n        if(!this.isNodeInfoEnable) {\r\n            this.isNodeInfoEnable = true;\r\n            this.nodeInfoBar.active = true;\r\n        }\r\n\r\n        this.nodeInfoText.string = this.nodeInfoPrefix+info+this.nodeInfoSuffix;\r\n    }\r\n\r\n    /**\r\n     * add info\r\n     * @param info \r\n     */\r\n    public addRichInfo(info:string){\r\n\r\n        this.nodeInfoText.string += this.nodeInfoPrefix+info+this.nodeInfoSuffix;\r\n    }\r\n\r\n    /**\r\n     * clean info in block\r\n     */\r\n    public cleanRichInfo(){\r\n        this.nodeInfoText.string = \"\";\r\n        \r\n    }\r\n\r\n    /**\r\n     * clean info of info bar\r\n     */\r\n    public cleanAndDisableInfoBar(){\r\n        this.nodeInfoText.string = \"\";\r\n        this.nodeInfoBar.active = false;\r\n    }\r\n\r\n    /**\r\n     * show the order of tags\r\n     */\r\n    private chooseLayoutBtn(){\r\n        \r\n        try{\r\n            this.cleanTagOrderChoices();\r\n            \r\n            /** \r\n             * read the possible layout order \r\n             */\r\n            let tagList = Array.from(Manager.Instance().vertexManager.vertexTagSet);\r\n            if(tagList.length == 0) return;\r\n            /**\r\n             * order of\r\n             */\r\n            // let tagOrderList = [];\r\n            // this.generatePermutations(tagList,[],tagOrderList);\r\n            let tagOrderList = Object.keys(Manager.Instance().relationManager.tagDegreeDic);\r\n            let tagOrderNum = tagOrderList.length;\r\n            // let this.tagOrderChoiceBtnList = []\r\n            this.tagOrderChoiceBar.getComponent(UITransform).setContentSize(this.BtnLength, (tagOrderNum) * this.BtnWidth);\r\n            this.tagOrderChoiceBtnList = new Array<Node>(tagOrderNum);\r\n            \r\n            \r\n            /**\r\n             * show the layout order choices \r\n            */\r\n            \r\n                for(let i = 0; i < tagOrderList.length; i++){\r\n                    const tagOrderBtn = instantiate(this.tagOrderChoiceBtnPrefab);\r\n                \r\n                    tagOrderBtn.setParent(this.tagOrderChoiceBar.node);\r\n                    tagOrderBtn.setPosition(0, i * this.BtnWidth, 0);\r\n                    tagOrderBtn.getChildByName('Label').getComponent(Label).string = tagOrderList[i]; // set the string of tag order button\r\n                    \r\n                    const tagOrderChoiceHandler = new EventHandler();\r\n                    tagOrderChoiceHandler.target = this.node;\r\n                    tagOrderChoiceHandler.component = \"UIManager\";\r\n                    tagOrderChoiceHandler.handler = \"changeLayout\";\r\n                   \r\n                    tagOrderChoiceHandler.customEventData = this.getPermutationByTagDegree(tagOrderList[i]).join(\",\");\r\n                    // this.tagOrderChoiceBtnList.push(tagOrderBtn);\r\n                \r\n                    tagOrderBtn.getComponent(Button).clickEvents.push(tagOrderChoiceHandler);\r\n                \r\n                    \r\n                }\r\n\r\n       }\r\n       catch(error){\r\n        console.log(error);\r\n       }\r\n        this.tagOrderChoiceBar.node.active = true;\r\n\r\n    }\r\n\r\n    /**\r\n     * get the permutation of tags by their degree\r\n     * @param firstElement \r\n     * @returns \r\n     */\r\n    private getPermutationByTagDegree(firstElement: string){\r\n        let tagOrderList = new Array<string>();\r\n        let dic = Manager.Instance().relationManager.tagDegreeDic;\r\n        let arr = Object.keys(Manager.Instance().relationManager.tagDegreeDic);\r\n        \r\n        tagOrderList.push(firstElement);\r\n        for(let i = 0; i < arr.length; i++){\r\n            if(arr[i] == firstElement) continue;\r\n             for(let j = 0; j < arr.length - 1; j++)\r\n             {\r\n                const key1 = arr[i];\r\n                const key2 = arr[j];\r\n                if(dic[key1] > dic[key2]){\r\n                    [arr[i], arr[j]] = [arr[j],arr[i]];\r\n                }\r\n             }\r\n        }\r\n        \r\n        \r\n        for(let tag of arr){\r\n            if(tag != firstElement)\r\n                tagOrderList.push(tag);\r\n            \r\n        }\r\n        //console.log(\"tagOrderList:\",tagOrderList)\r\n        return tagOrderList;\r\n    }\r\n\r\n\r\n    /**\r\n     * get the all the permutation of tags\r\n     * @param input \r\n     * @param current \r\n     * @param result \r\n     * @returns \r\n     */\r\n    private generatePermutations(input, current, result) {\r\n        \r\n        if (current.length === input.length) {\r\n            result.push(current.slice()); \r\n            return;\r\n        }\r\n        for (let i = 0; i < input.length; ++i) {\r\n\r\n            if (!current.includes(input[i])) {\r\n                current.push(input[i]);\r\n                this.generatePermutations(input, current, result);\r\n                current.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * check the mouse leave on btn\r\n     */\r\n    private onLayoutBtnMouseLeave(event:EventMouse){\r\n        let mouseIn = false;\r\n       \r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n        }\r\n        \r\n\r\n        // set new timer to check if mouse enter tagOrderChoiceBar blockB\r\n        this.timer = setTimeout(() => {\r\n            if (!this.isEnteredTagOrderChoiceBar) {\r\n                \r\n                this.tagOrderChoiceBar.node.active = false;\r\n            }\r\n        }, 0.3);\r\n        \r\n    }\r\n\r\n    // private onTagOrderChoiceBtnClick(tagOrderString: string){\r\n        \r\n    //     //this.finalTagOrder = tagOrderString.split(\",\");\r\n    //     this.tagOrderChoiceBar.node.active = false;\r\n    //     this.dropDownBarLayout.node.active = false;\r\n        \r\n    // }\r\n\r\n    private cleanTagOrderChoices(){\r\n        this.isEnteredTagOrderChoiceBar = false;\r\n        if(this.tagOrderChoiceBar.node.children == null) return;\r\n        for(let child of this.tagOrderChoiceBar.node.children){\r\n            this.tagOrderChoiceBtnList = new Array<Node>();\r\n            child.destroy();\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * set vertex ID Label for each vertex\r\n     * @param vertex: Vertex\r\n     */\r\n    public setVeretxIDLabel(vertex: Vertex){\r\n        // const vertexIDLabel = instantiate(this.vertexIDLabelPrefab);\r\n        // vertexIDLabel.setWorldPosition(vertex.node.worldPosition.x + 0.5, vertex.node.worldPosition.y + 1.5, 0);\r\n        // vertexIDLabel.getComponent(Label).string = vertex.vid;\r\n    }\r\n    \r\n}\r\n\r\n","import { _decorator, CCBoolean, CCInteger, CCString, Color, Component, FixedJoint2D, Label, MeshRenderer, Node, Vec4 } from 'cc';\r\nimport { Manager } from './Manager';\r\nimport { Edge } from './Edge';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Vertex')\r\nexport class Vertex extends Component {\r\n\r\n    @property(CCString)\r\n    public vid: string = \"\";\r\n    @property([CCString])\r\n    public tags: [string];\r\n    @property(Object)\r\n    public properties: Object =  new Object;\r\n    @property(CCString)\r\n    public type:string = \"vertex\";\r\n\r\n    @property(Number)\r\n    public degree:number = 0;\r\n\r\n    @property(Boolean)\r\n    public isLayouted = false;\r\n\r\n    @property({type:[Edge]})\r\n    public edgesSetOfVertex:Edge[] = [];\r\n\r\n    @property(Label)\r\n    public idLabel = null;\r\n\r\n    @property(CCBoolean)\r\n    public isClicked:false; // if the vertex is clicked once\r\n\r\n    \r\n    protected onLoad(): void {\r\n        this.idLabel = this.node.getChildByName(\"ID\").getComponent(Label);\r\n        // console.log(\"id node:\",this.idLabel)\r\n    }\r\n    /**\r\n     * 0 -- current material\r\n     * 1 -- focus material\r\n     * 2~ --  random initial material\r\n     */\r\n    @property(CCInteger)\r\n    public materialCode = 2; //\r\n\r\n    // @property(Boolean)\r\n    // public isFocus:false;\r\n\r\n    /**\r\n     * set the attribute of vertex by JSON Object\r\n     * @param attribute \r\n     */\r\n    public setAttribute(attribute: any) {\r\n        //Manager.Instance().relationManager.popLastVertex();\r\n        if(this.vid != \"\"){\r\n            Manager.Instance().relationManager.removeVertex(this.vid);\r\n            \r\n        }\r\n         //Manager.Instance().relationManager.popLastVertex();\r\n\r\n        for (let key in attribute) {\r\n            if (this.hasOwnProperty(key)) {\r\n                this[key] = attribute[key];\r\n            }\r\n        }\r\n        Manager.Instance().relationManager.setVertexID(this.vid);\r\n        for(let tag of this.tags){\r\n            Manager.Instance().vertexManager.addTag(tag);\r\n        }\r\n        //console.log(\"vid:\",this.vid)\r\n        //console.log(\"idlabel:\",this.idLabel)\r\n        this.idLabel.string = this.vid;\r\n\r\n\r\n       \r\n    }\r\n\r\n    public setWorldPosition(entry: Node){\r\n        this.node.setWorldPosition(entry.worldPosition);\r\n    }\r\n\r\n\r\n    /**\r\n     * for those create vertex without certain vid\r\n     * then set vid by random \r\n     */\r\n    public setVertexId(){\r\n        // console.log(\"Manager.Instance().relationManager:\",Manager.Instance().relationManager);\r\n        this.vid = Manager.Instance().relationManager.setVertexID();\r\n        //this.idLabel.string = this.vid;\r\n        //console.log(\"set vertex id:\", this.vertexId);\r\n    }\r\n\r\n\r\n    public getVertexID(){\r\n        //console.log(\"vertex id:\",this.vertexId);\r\n        return this.vid;\r\n    }\r\n\r\n    public returnToInitialMaterial(){\r\n        let initialMaterial = this.getComponent(MeshRenderer).getMaterial(this.materialCode);\r\n        this.getComponent(MeshRenderer).setMaterial(initialMaterial, 0);\r\n    }\r\n\r\n    public setMaterialCode(code:number){\r\n        this.materialCode = code;\r\n    }\r\n\r\n    /**\r\n     * change material \r\n     * @param materialIndex: the code of changed material \r\n     */\r\n    public changeMaterial(materialIndex:number){\r\n        // console.log(\"idlabel:\",this.idLabel);\r\n        let tmpMaterial = this.getComponent(MeshRenderer).getMaterial(materialIndex);\r\n        this.getComponent(MeshRenderer).setMaterial(tmpMaterial, 0);\r\n\r\n        // set color of idlabel\r\n        const passes = this.getComponent(MeshRenderer).getMaterial(0).passes[0];\r\n        const colorUniform = passes.getUniform(passes.getHandle('albedo'),new Vec4(1, 1,0,0));\r\n       \r\n        const color = new Color(colorUniform.x * 255, colorUniform.y* 255, colorUniform.z* 255, colorUniform.w * 255);\r\n        this.idLabel.color = color; \r\n        \r\n    }\r\n\r\n    public getMaterialCode(){\r\n        return this.materialCode;\r\n    }\r\n\r\n    /**\r\n     * present the details of vertex\r\n     */\r\n    public showVertexDetails(){\r\n        //console.log(\"show detail Vertex ID:\"+this.vid);\r\n        \r\n        //console.log(\"tag:\",this.tags);\r\n        Manager.Instance().UIManager.nodeInfoBar.active = true;\r\n        Manager.Instance().UIManager.setRichInfo(\"Vertex vid:\"+this.vid);\r\n        Manager.Instance().UIManager.addRichInfo(\"tag:\"+this.tags);\r\n        \r\n        this.printNestedJSON(this.properties,\"properties\");\r\n        \r\n    }\r\n\r\n    public addEdgeInfoOnVertex(edge:Edge){\r\n        \r\n        this.edgesSetOfVertex.push(edge);\r\n        Manager.Instance().vertexManager.vertexEdgeDic[this.vid].push(edge.getEdgeID());\r\n    }\r\n    \r\n    private printNestedJSON(obj, parentKey = '') {\r\n        for (let key in obj) {\r\n          let newKey = parentKey ? `${parentKey}.${key}` : key;\r\n          if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n            this.printNestedJSON(obj[key], newKey);\r\n          } else {\r\n                Manager.Instance().UIManager.addRichInfo(key+\": \"+obj[key]);\r\n          }\r\n        }\r\n   }\r\n\r\n   public increaseVertexDegree(){\r\n    this.degree++;\r\n    //console.log(\"vertex:\",vid,\" number:\",this.vertexDegreeDic[vid])\r\n}\r\n\r\n}\r\n\r\n","import { _decorator, Component, Prefab, instantiate, Node, Vec3,Quat, MeshRenderer } from 'cc';\r\nimport { Manager } from './Manager';\r\nimport { Vertex } from './Vertex';\r\nimport { Edge } from './Edge';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('VertexManager')\r\nexport class VertexManager extends Component {\r\n\r\n    node: Node;\r\n    // @property(Vec3)\r\n    // offset:Vec3 = new Vec3(-4,4,4);\r\n\r\n    isTransformView:boolean = false;\r\n\r\n    @property(Node)\r\n    rootNode:Node;\r\n\r\n    @property(Node)\r\n    public currentCentralNode:Node;\r\n\r\n    @property(Node)\r\n    chosenVertex:Node = null;\r\n\r\n    @property({ type: Prefab })\r\n    public vertexPrefab: Prefab = null;\r\n\r\n    @property\r\n    public vertexRadius;\r\n\r\n    /**\r\n     * store the {vertex1:[edge1,edge2], vertex2:[edge3,edge4]}\r\n     */\r\n    public vertexEdgeDic : {[key:string]:any[]} = {}\r\n\r\n    private vertexMaterialCount = 5;\r\n\r\n    /**\r\n     * Container of vertex's tags\r\n     */\r\n    public vertexTagSet: Set<string> = new Set<string>();\r\n\r\n\r\n\r\n\r\n    protected onLoad(): void {\r\n        this.rootNode =  this.node.getChildByName(\"CentralVertexOfCamera\");\r\n        this.vertexRadius = 30;\r\n        this.vertexTagSet = new Set<string>();\r\n        \r\n    }\r\n\r\n    protected start(): void {\r\n       \r\n        \r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns Node, the vertex is vertex.getCompoent(Vertex)\r\n     */\r\n    public createStartNode():Node{\r\n        const vertex = instantiate(this.vertexPrefab); // initial the prefab\r\n        vertex.setParent(Manager.Instance().vertexManager.rootNode);\r\n        vertex.getComponent(Vertex).setVertexId(); //set id\r\n        let initialMaterialCode =  Math.floor(Math.random() * (this.vertexMaterialCount)) + 2; // get the random material code\r\n\r\n        // let tmpMaterial = vertex.getComponent(Vertex).getComponent(MeshRenderer).getMaterial(initialMaterialCode);\r\n        // vertex.getComponent(Vertex).getComponent(MeshRenderer).setMaterial(tmpMaterial, 0); // set the random material\r\n\r\n        const randomDirection = new Vec3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\r\n        const randomOffset = randomDirection.clone().multiplyScalar(this.vertexRadius); // set the random position of node\r\n        \r\n        // \r\n        const position = randomOffset.add(Manager.Instance().vertexManager.currentCentralNode.worldPosition); // set the currentCentralNode as center\r\n        vertex.worldPosition = position;\r\n        // vertex.setParent(node);\r\n        \r\n        this.vertexEdgeDic[vertex.getComponent(Vertex).getVertexID()] = []; // set id\r\n        vertex.getComponent(Vertex).setMaterialCode(initialMaterialCode);\r\n        vertex.getComponent(Vertex).changeMaterial(initialMaterialCode);\r\n        //console.log(\"create vertexEdgeDic of:\",vertex.getComponent(Vertex).getVertexID()+\"dic:\",this.vertexEdgeDic);\r\n\r\n        return vertex;\r\n    }\r\n\r\n\r\n    /**\r\n     * create end node around parent node when click the start node\r\n     * @param node the parent node\r\n     * @returns \r\n     */\r\n    public createNodeAround(node: Node) {\r\n        const vertex = instantiate(this.vertexPrefab); // initial the prefab\r\n\r\n        vertex.getComponent(Vertex).setVertexId();\r\n        \r\n        let initialMaterialCode =  Math.floor(Math.random() * (this.vertexMaterialCount)) + 2; // get the random material code\r\n        \r\n\r\n        // let tmpMaterial = vertex.getComponent(Vertex).getComponent(MeshRenderer).getMaterial(initialMaterialCode);\r\n        // vertex.getComponent(Vertex).getComponent(MeshRenderer).setMaterial(tmpMaterial, 0); // set the random material\r\n\r\n        // const randomDirection = new Vec3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\r\n        // const randomOffset = randomDirection.clone().multiplyScalar(this.vertexRadius);\r\n        const randomDirection = new Vec3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\r\n        const randomOffset = randomDirection.clone().multiplyScalar(this.vertexRadius);\r\n        \r\n        // \r\n        const position = randomOffset.add(node.worldPosition);\r\n        vertex.worldPosition = position;\r\n        // vertex.setParent(node);\r\n        vertex.setParent(Manager.Instance().vertexManager.rootNode);\r\n        this.vertexEdgeDic[vertex.getComponent(Vertex).getVertexID()] = []; // set id\r\n        \r\n        vertex.getComponent(Vertex).setMaterialCode(initialMaterialCode);\r\n        vertex.getComponent(Vertex).changeMaterial(initialMaterialCode);\r\n\r\n        // vertex.getComponent(Vertex).setVertexId();\r\n        // vertex.setParent(this.node);\r\n        return vertex;\r\n    }\r\n\r\n    /**\r\n     * click one vertex and choose this vertex as potential focus\r\n     * call it when click it once\r\n     * @param chosenNode \r\n     */\r\n    public chooseOneNormalVertexToFocus(chosenNode:Node){\r\n        this.chosenVertex = chosenNode;\r\n        // this.currentCentralNode = chosenNode;\r\n        let focusMaterial = this.chosenVertex.getComponent(Vertex).getComponent(MeshRenderer).getMaterial(1);\r\n        this.chosenVertex.getComponent(Vertex).getComponent(MeshRenderer).setMaterial(focusMaterial, 0);\r\n    }\r\n\r\n    public returnFocusToNormalVertex(){\r\n        \r\n        if(!this.chosenVertex) return;\r\n        this.chosenVertex.getComponent(Vertex).returnToInitialMaterial();\r\n        this.chosenVertex = null;\r\n        Manager.Instance().UIManager.cleanAndDisableInfoBar();\r\n\r\n    }\r\n\r\n    /**\r\n     * get the Node of vertex by name\r\n     * @param vertexID \r\n     * @returns Node\r\n     */\r\n    public getVertexNodeByVID(vertexID:String):Node{\r\n        for(let child of this.rootNode.children){\r\n            if(child.getComponent(Vertex).vid == vertexID) return child;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * add type to Set\r\n     * @param type \r\n     */\r\n    public addTag(type:string){\r\n        // vertexTypeSet doesn't have this type\r\n        if(!this.vertexTagSet.has(type)){\r\n            this.vertexTagSet.add(type); // add this type\r\n        }\r\n    }\r\n\r\n    public removeLayoutFlags(){\r\n        \r\n        this.traverseNodesChildren(this.rootNode)\r\n        //let parents = this.rootNode;\r\n        // for(let child of parents.children){\r\n        //     if(child.children != null){\r\n        //         console.log(\"parent:\",parents,\" child:\",child);\r\n        //         parents = child;\r\n\r\n        //     }\r\n        //     else{\r\n        //         console.log(\"node name:\",child.name);\r\n        //         child.getComponent(Vertex).isLayouted = false;\r\n                \r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private traverseNodesChildren(node: Node){\r\n        \r\n        if(node.getComponent(Vertex) != null){\r\n            node.getComponent(Vertex).isLayouted = false;\r\n        }\r\n        if(node.children == null) return;\r\n        for(let child of node.children){\r\n            this.traverseNodesChildren(child);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * delete all the children of veretxManager\r\n     */\r\n    public destroyAllChildren(){\r\n        //console.log(\"root node:\",this.rootNode);\r\n        this.rootNode.children.forEach((child) => {\r\n            child.destroy();\r\n        });\r\n        this.rootNode.removeAllChildren();\r\n        // this.node.children.forEach((child) => {\r\n        //     child.destroy();\r\n        // });\r\n        // this.node.removeAllChildren();\r\n        Manager.Instance().relationManager.resetVertexAndEdgeBox();\r\n        this.rootNode.position = new Vec3(0, 0, 0);\r\n        this.rootNode.rotation =  Quat.identity(new Quat());\r\n        this.currentCentralNode = this.rootNode;\r\n        this.returnFocusToNormalVertex();\r\n    }\r\n\r\n    /**\r\n     * do the initiation\r\n     */\r\n    public initiateOriginalVertex(){\r\n        const vertex = instantiate(this.vertexPrefab);\r\n\r\n        // this.centralNode.position = new Vec3(0, 0, 0);\r\n        // this.centralNode.rotation =  Quat.identity(new Quat());\r\n        vertex.getComponent(Vertex).setVertexId();\r\n        vertex.worldPosition = new Vec3(0,0,0);\r\n        vertex.setParent(this.rootNode);\r\n        \r\n        this.currentCentralNode =  vertex;\r\n    \r\n        // this.node.position = new Vec3(0, 0, 0);\r\n        // this.node.rotation =  Quat.identity(new Quat());\r\n        // vertex.getComponent(Vertex).setVertexId();\r\n        // vertex.worldPosition = new Vec3(0,0,0);\r\n        // vertex.setParent(this.node);\r\n        // this.centralNode = vertex;\r\n    }\r\n\r\n\r\n\r\n\r\n}"]}